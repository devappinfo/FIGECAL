#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 49660242-36f1-4571-9038-efb4de726ce7
# Source File: \\srvdc01\informatique$\Developpement\PowerShell\Remote RDP Sessions\RemoteRDP-MultiForm - 2019 - Copie\RemoteRDP-MultiForm.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
EgMAAB+LCAAAAAAABACdU11vgjAUfTfxPxAelyAfMp0Z9mExLD64GTB7XSpchK20pC1O9+tXKCwa
Z7bspe253J7DOReCCBK2B35cYInRcGAYwZqzN0ikER9pknNGi09I52aIiQCzLYYFkcDn5s2oEu59
s5Z6S/XmHkrSHrJ2FWrVlRxINZIHabZCSuoFuCgYRd7ICewedM+UCiwXyJ9NJo7ne9Z4krmWfzt1
rZkzvrMg2/opTL1JAtPA7pq7q52DzbECpIhPYU/OSKrkDPtUTXSgg8ZDXRDl3DFRLDGXddWY0VrX
Oo04x7yJa8NrlVYEGXCgCYQ1TaQyNzeXdM/ewXokbIvJqwrLRPosmuR+Yf+BL87Zh7XCBQ0ZLxVf
ZqIeNRP4L6HYnfBp8Ae63n33sVy3r0aSgBARlEyCTuGsdJGFBnpC3xPV6JkXu4Ji0jQ84RKQpogW
a2tVE1l0716pO4F90TwcBPbZP/AFJCzVMhIDAAA=#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
     Generated on:       23/05/2019 23:22
     Generated by:       administrateur
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2018
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
6wMAACODCAAAAAAABAC9k0trg0AQx++FfgfJWdRlXU1AhdCQS+mDWtJeRx1l6T7C7prgt69NS1Jo
SUsOMpd5MPPjz8xkT1jrHZphBQ680bFcq3xGAzIrrq88L3swvOMKxJoLvAeJRenAuH4bbK3Nwh/V
Q8/SWpSV4GgP8SkzFOVgHUrf23yR4iD6MN+76YXrDeYKe2dA+N5jP06ob3F41m+o8ipNgdUsIQsa
YzRfZOFx5u+M4A4UdChRuWDZOy3BjcATmfyXTEnV0jlLoKFJjJT9TX7hqtF7G6y1kXYSrSsDe666
S1gRbVmbtoQ0LAIKZ1jS1toIXk2jaLzHSUCvUkwjiBusnTZDiWbHa7zoMM4v6xh+fl4Wfn/u4h27
t81y6wMAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
	Import-Module RemoteDesktop
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
#endregion Source: Globals.ps1

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formSessionsRDP = New-Object 'System.Windows.Forms.Form'
	$checkedlistbox1 = New-Object 'System.Windows.Forms.CheckedListBox'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonMessageGénéral = New-Object 'System.Windows.Forms.Button'
	$buttonFermerTouteslesSessi = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonMessages = New-Object 'System.Windows.Forms.Button'
	$buttonTélémaintenance = New-Object 'System.Windows.Forms.Button'
	$buttonProcessus = New-Object 'System.Windows.Forms.Button'
	$buttonFermerLesSessions = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$checkboxSessionsActives = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxSessionsInactives = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxSessionsDéconnectés = New-Object 'System.Windows.Forms.CheckBox'
	$labelnsessions = New-Object 'System.Windows.Forms.Label'
	$labelFermesRDS = New-Object 'System.Windows.Forms.Label'
	$labelSessionsRDP = New-Object 'System.Windows.Forms.Label'
	$combobox1 = New-Object 'System.Windows.Forms.ComboBox'
	$buttonQuitter = New-Object 'System.Windows.Forms.Button'
	$buttonRafraichir = New-Object 'System.Windows.Forms.Button'
	$listview1 = New-Object 'System.Windows.Forms.ListView'
	$Utilisateurs = New-Object 'System.Windows.Forms.ColumnHeader'
	$serveurs = New-Object 'System.Windows.Forms.ColumnHeader'
	$ID = New-Object 'System.Windows.Forms.ColumnHeader'
	$Etat = New-Object 'System.Windows.Forms.ColumnHeader'
	$contextmenustrip1 = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$qqToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripmenuitem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripmenuitem2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$télémaintenanceToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formSessionsRDP_Load={
		[string]$ScriptDirectory = Get-ScriptDirectory
		init_proc
	}
	
	#region Control Helper Functions
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	function Load-ComboBox
	{
	<#
	    .SYNOPSIS
	        This functions helps you load items into a ComboBox.
	
	    .DESCRIPTION
	        Use this function to dynamically load items into the ComboBox control.
	
	    .PARAMETER  ComboBox
	        The ComboBox control you want to add items to.
	
	    .PARAMETER  Items
	        The object or objects you wish to load into the ComboBox's Items collection.
	
	    .PARAMETER  DisplayMember
	        Indicates the property to display for the items in this control.
	    
	    .PARAMETER  Append
	        Adds the item(s) to the ComboBox without clearing the Items collection.
	    
	    .EXAMPLE
	        Load-ComboBox $combobox1 "Red", "White", "Blue"
	    
	    .EXAMPLE
	        Load-ComboBox $combobox1 "Red" -Append
	        Load-ComboBox $combobox1 "White" -Append
	        Load-ComboBox $combobox1 "Blue" -Append
	    
	    .EXAMPLE
	        Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>	
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	#region Traitement des Evènements
	$buttonFermerLesSessions_Click={
		#TODO: Place custom script here
		$njob = 0
		Write-Host $listview1.SelectedItems.count
		foreach ($item in $listview1.SelectedItems)
		{
			# Créer autant de Job que de commande (Traitements parallèle)
			$njob = $njob + 1
			close_RDPsessions $item.SubItems[1].Text $item.SubItems[2].text $njob
		}
		# Refresh ListView
		Combo_TRT $combobox1.SelectedItem
	}
	
	$buttonRafraichir_Click={
		Combo_TRT $combobox1.SelectedItem
	}
	
	$combobox1_SelectedIndexChanged ={
		Combo_TRT $combobox1.SelectedItem
	}
	
	$buttonProcessus_Click = {
		# Declaration des variables global avant d'ouvrir le GUI enfant
		$global:serveur = $listview1.SelectedItems[0].SubItems[1].text
		$global:user = $listview1.SelectedItems.text
		#$commande = "Z:\ProcessRemote.ps1", $serveur, $user
		$commande = $serveur + "," + $user
		$scr = '"' + $ScriptDirectory + "\ProcessRemote.ps1" + '"'
		#Start-Process powershell.exe -ArgumentList $commande
		Start-Process $scr -ArgumentList $serveur, $user
	}
	
	$buttonTélémaintenance_Click = {
		foreach ($item in $listview1.SelectedItems)
		{
			Rdp_ShadowCopy $item.SubItems[1].Text $item.SubItems[2].text $njob
		}
	}
	
	$buttonMessages_Click = {
		#TODO: Place custom script here
		$global:serveur = $listview1.SelectedItems[0].SubItems[1].text
		$global:id = $listview1.SelectedItems[0].SubItems[2].Text
		$global:user = $listview1.SelectedItems[0].Text
		Show-MsgForm_psf 
	}
	
	$listview1_ColumnClick = {
		#Event Argument: $_ = [System.Windows.Forms.ColumnClickEventArgs]
		Write-Host "Ca va la"
		Write-Host ("Column '{0}' was clicked" -f $this.Columns[$_.Column].Text)
		#TODO : trier les colonnes
		Write-Host $this.Columns[$_.Column].Index
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex $this.Columns[$_.Column].Index -SortOrder None  
	}
	
	$checkboxSessionsDéconnectés_CheckStateChanged = {
		#TODO: Place custom script here
		Combo_TRT $combobox1.SelectedItem
	}
	
	$checkboxSessionsInactives_CheckStateChanged = {
		#TODO: Place custom script here
		Combo_TRT $combobox1.SelectedItem
	}
	
	$checkboxSessionsActives_CheckStateChanged = {
		#TODO: Place custom script here
		Combo_TRT $combobox1.SelectedItem
	}
	
	
	
	#endregion
	
	#region Fonctions du script
	function init_proc
	{
		$global:n = 0
		$global:computername = ""
		$ScrName = (Split-Path -leaf $PSCommandpath)
		$inifileName = ($ScrName.substring(0, $ScrName.length - 4)) + ".inf"
		$inifile = $ScriptDirectory + "\" + $inifileName
		Write-Host $inifile
		$iniContent = read_ini $inifile
		$value = ($iniContent["serveurs"]["Ferme RDP"])
		$tabValueNotChecked = @()
		Write-Host $value
		Load-ComboBox $combobox1 "rdp.figecal.loc", "rdp01.figecal.loc", "FIG-APP01.figecal.loc", "AGO-APP01.figecal.loc", "SRVAPP01.figecal.loc"
		
	}
	
	################################################################################################################
	# Uniquement depuis un serveur broker
	# Utilise le module RemoteDesktop 
	################################################################################################################
	function query_sessions()
	{
		# $args[0] = nom du broker à intérroger
		Write-Host $args[0]
	switch ($args[0])
	{
		"rdp.figecal.loc" { $srv = "srvrdp01.figecal.loc" }
		"rdp01.figecal.loc" { $srv = "srvbroker.figecal.loc" }
		"FIG-APP01.figecal.loc" { $srv = "fig-app01.figecal.loc" }
		"AGO-APP01.figecal.loc" { $srv = "ago-app01.figecal.loc" }
		"SRVAPP01.figecal.loc" { $srv = "srvapp01.figecal.loc" }
	}
	
		$n = 0
		$script:selected = Get-RDUserSession -ConnectionBroker $srv | Sort-Object -Property hostserver | Select-Object sessionId, hostserver, username, sessionstate 
		Write-Host $selected.count
		$tag = New-Object -TypeName PSCustomObject -Property @{ sortOrder = [System.Windows.Forms.SortOrder]::Ascending }
		Write-Host $tag
		foreach ($col in $listview1.Columns)
		{
			$col.Tag = $tag
		}
		ForEach ($Result in $selected)
		{
			#Write-Host $Result.UserName
			
			# Mise en forme du texte état de connexion
			switch ($Result.sessionstate)
			{
				"STATE_DISCONNECTED" { $state = "Déconnecté" }
				"STATE_CONNECTED" { $state = "Inactive" }
				"STATE_ACTIVE" { $state = "Active" }
			}
			
			# Supprime le nom de domaine des nom de serveur
			$hostname = $Result.hostserver.split('.')[0].split('.')
			if ($checkboxSessionsDéconnectés.Checked -eq $false)
			{
				if ($state -eq "Déconnecté")
				{
					continue
				}
			}
			
			if ($checkboxSessionsInactives.Checked -eq $false)
			{
				if ($state -eq "Inactive")
				{
					continue
				}
			}
			
			if ($checkboxSessionsActives.Checked -eq $false)
			{
				if ($state -eq "Active")
				{
					continue
				}
			}
			$n = ($n + 1)
			# Ajoute les éléments à la listview
			Add-ListViewItem $listview1 -Items $Result.username -ImageIndex 0 -SubItems $hostname, $Result.sessionID, $state 
			
		}
		return $n
	}
	
	function read_ini
	{
		$FilePath = $args[0]
		{
			$ini = @{ }
			switch -regex -file $FilePath
			{
				"^\[(.+)\]" # Section
				{
					$section = $matches[1]
					$ini[$section] = @{ }
					$CommentCount = 0
				}
				"^(;.*)$" # Comment
				{
					$value = $matches[1]
					$CommentCount = $CommentCount + 1
					$name = "Comment" + $CommentCount
					$ini[$section][$name] = $value
				}
				"(.+?)\s*=(.*)" # Key
				{
					$name, $value = $matches[1 .. 2]
					$ini[$section][$name] = $value
				}
			}
			return $ini
		}
	}
	
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	function Combo_TRT
	{
		$n = 0
		$listview1.BeginUpdate()
		$listview1.Items.Clear()
		
		$combotxt = $args[0]
		$n = query_sessions ($combotxt)
		$listview1.EndUpdate()
		
		# Inscrit le nombre de sessions listées dans le Label
		Write-Host $n
		$labelnsessions.Text = $n
		$labelnsessions.Update()
	}
	
	function Close_RDPSessions
	{
		$serveur = $args[0]
		$SessionsID = $args[1]
		$PowerShellJobN = $args[2]
		Write-Host $PowerShellJobN
		
		# Creation de Job pour chaque entrée MultiTread
		Start-Job -Name $PowerShellJobN -ScriptBlock {
			param ($serveur,$SessionsID)
			Write-Host $serveur + " " + $SessionsID
			logoff $SessionsID /server:$serveur
		} -ArgumentList ($serveur, $SessionsID)
	}
	
	function Rdp_ShadowCopy
	{
		$serveur = $args[0]
		$SessionsID = $args[1]
		write-host /v:$serveur /Multimon /Shadow:$SessionsID /Control /noConsentPrompt
		mstsc /v:$serveur /Shadow:$SessionsID /Control /noConsentPrompt
	}
	#endregion
	
	
	$contextmenustrip1_Opening=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		Write-Host $contextmenustrip1.Items.Item.Selected.ToString
		Write-Host $
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formSessionsRDP.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_checkedlistbox1 = $checkedlistbox1.SelectedItems
		$script:MainForm_checkboxSessionsActives = $checkboxSessionsActives.Checked
		$script:MainForm_checkboxSessionsInactives = $checkboxSessionsInactives.Checked
		$script:MainForm_checkboxSessionsDéconnectés = $checkboxSessionsDéconnectés.Checked
		$script:MainForm_combobox1 = $combobox1.Text
		$script:MainForm_combobox1_SelectedItem = $combobox1.SelectedItem
		$script:MainForm_listview1 = $listview1.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonMessages.remove_Click($buttonMessages_Click)
			$buttonTélémaintenance.remove_Click($buttonTélémaintenance_Click)
			$buttonProcessus.remove_Click($buttonProcessus_Click)
			$buttonFermerLesSessions.remove_Click($buttonFermerLesSessions_Click)
			$checkboxSessionsActives.remove_CheckStateChanged($checkboxSessionsActives_CheckStateChanged)
			$checkboxSessionsInactives.remove_CheckStateChanged($checkboxSessionsInactives_CheckStateChanged)
			$checkboxSessionsDéconnectés.remove_CheckStateChanged($checkboxSessionsDéconnectés_CheckStateChanged)
			$combobox1.remove_SelectedIndexChanged($combobox1_SelectedIndexChanged)
			$buttonRafraichir.remove_Click($buttonRafraichir_Click)
			$listview1.remove_ColumnClick($listview1_ColumnClick)
			$formSessionsRDP.remove_Load($formSessionsRDP_Load)
			$contextmenustrip1.remove_Opening($contextmenustrip1_Opening)
			$formSessionsRDP.remove_Load($Form_StateCorrection_Load)
			$formSessionsRDP.remove_Closing($Form_StoreValues_Closing)
			$formSessionsRDP.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formSessionsRDP.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	$contextmenustrip1.SuspendLayout()
	#
	# formSessionsRDP
	#
	$formSessionsRDP.Controls.Add($checkedlistbox1)
	$formSessionsRDP.Controls.Add($statusbar1)
	$formSessionsRDP.Controls.Add($groupbox3)
	$formSessionsRDP.Controls.Add($groupbox2)
	$formSessionsRDP.Controls.Add($groupbox1)
	$formSessionsRDP.Controls.Add($labelnsessions)
	$formSessionsRDP.Controls.Add($labelFermesRDS)
	$formSessionsRDP.Controls.Add($labelSessionsRDP)
	$formSessionsRDP.Controls.Add($combobox1)
	$formSessionsRDP.Controls.Add($buttonQuitter)
	$formSessionsRDP.Controls.Add($buttonRafraichir)
	$formSessionsRDP.Controls.Add($listview1)
	$formSessionsRDP.AutoScaleDimensions = '6, 13'
	$formSessionsRDP.AutoScaleMode = 'Font'
	$formSessionsRDP.AutoSize = $True
	$formSessionsRDP.CancelButton = $buttonQuitter
	$formSessionsRDP.ClientSize = '834, 456'
	$formSessionsRDP.MaximizeBox = $False
	$formSessionsRDP.MaximumSize = '850, 495'
	$formSessionsRDP.MinimumSize = '650, 495'
	$formSessionsRDP.Name = 'formSessionsRDP'
	$formSessionsRDP.StartPosition = 'CenterScreen'
	$formSessionsRDP.Text = 'Sessions RDP'
	$formSessionsRDP.add_Load($formSessionsRDP_Load)
	#
	# checkedlistbox1
	#
	$checkedlistbox1.FormattingEnabled = $True
	[void]$checkedlistbox1.Items.Add('fsfdsf')
	[void]$checkedlistbox1.Items.Add('sff')
	[void]$checkedlistbox1.Items.Add('sfs')
	[void]$checkedlistbox1.Items.Add('')
	[void]$checkedlistbox1.Items.Add('v')
	[void]$checkedlistbox1.Items.Add('x')
	[void]$checkedlistbox1.Items.Add('v')
	[void]$checkedlistbox1.Items.Add('v')
	[void]$checkedlistbox1.Items.Add('')
	[void]$checkedlistbox1.Items.Add('x')
	[void]$checkedlistbox1.Items.Add('')
	[void]$checkedlistbox1.Items.Add('')
	[void]$checkedlistbox1.Items.Add('xvvxvxvxvxcvxv')
	[void]$checkedlistbox1.Items.Add('')
	[void]$checkedlistbox1.Items.Add('xvxvxv')
	$checkedlistbox1.Location = '668, 61'
	$checkedlistbox1.Name = 'checkedlistbox1'
	$checkedlistbox1.Size = '154, 124'
	$checkedlistbox1.TabIndex = 14
	$checkedlistbox1.UseCompatibleTextRendering = $True
	#
	# statusbar1
	#
	$statusbar1.Location = '0, 434'
	$statusbar1.Name = 'statusbar1'
	$statusbar1.ShowPanels = $True
	$statusbar1.Size = '834, 22'
	$statusbar1.TabIndex = 13
	$statusbar1.Text = 'FIGECAL 2018 - NPT'
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($buttonMessageGénéral)
	$groupbox3.Controls.Add($buttonFermerTouteslesSessi)
	$groupbox3.Location = '430, 310'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Size = '213, 88'
	$groupbox3.TabIndex = 12
	$groupbox3.TabStop = $False
	$groupbox3.Text = 'Actions sur les Serveurs'
	$groupbox3.UseCompatibleTextRendering = $True
	#
	# buttonMessageGénéral
	#
	$buttonMessageGénéral.Location = '17, 54'
	$buttonMessageGénéral.Name = 'buttonMessageGénéral'
	$buttonMessageGénéral.Size = '179, 23'
	$buttonMessageGénéral.TabIndex = 12
	$buttonMessageGénéral.Text = 'Message général'
	$buttonMessageGénéral.UseCompatibleTextRendering = $True
	$buttonMessageGénéral.UseVisualStyleBackColor = $True
	#
	# buttonFermerTouteslesSessi
	#
	$buttonFermerTouteslesSessi.Location = '17, 21'
	$buttonFermerTouteslesSessi.Name = 'buttonFermerTouteslesSessi'
	$buttonFermerTouteslesSessi.Size = '179, 23'
	$buttonFermerTouteslesSessi.TabIndex = 9
	$buttonFermerTouteslesSessi.Text = 'Fermer toutes les sessions'
	$buttonFermerTouteslesSessi.UseCompatibleTextRendering = $True
	$buttonFermerTouteslesSessi.UseVisualStyleBackColor = $True
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($buttonMessages)
	$groupbox2.Controls.Add($buttonTélémaintenance)
	$groupbox2.Controls.Add($buttonProcessus)
	$groupbox2.Controls.Add($buttonFermerLesSessions)
	$groupbox2.Location = '430, 149'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '213, 155'
	$groupbox2.TabIndex = 11
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'Actions sur les sessions'
	$groupbox2.UseCompatibleTextRendering = $True
	#
	# buttonMessages
	#
	$buttonMessages.Location = '18, 119'
	$buttonMessages.Name = 'buttonMessages'
	$buttonMessages.Size = '179, 23'
	$buttonMessages.TabIndex = 11
	$buttonMessages.Text = 'Messages'
	$buttonMessages.UseCompatibleTextRendering = $True
	$buttonMessages.UseVisualStyleBackColor = $True
	$buttonMessages.add_Click($buttonMessages_Click)
	#
	# buttonTélémaintenance
	#
	$buttonTélémaintenance.Location = '18, 85'
	$buttonTélémaintenance.Name = 'buttonTélémaintenance'
	$buttonTélémaintenance.Size = '179, 23'
	$buttonTélémaintenance.TabIndex = 10
	$buttonTélémaintenance.Text = 'Télémaintenance'
	$buttonTélémaintenance.UseCompatibleTextRendering = $True
	$buttonTélémaintenance.UseVisualStyleBackColor = $True
	$buttonTélémaintenance.add_Click($buttonTélémaintenance_Click)
	#
	# buttonProcessus
	#
	$buttonProcessus.Location = '18, 51'
	$buttonProcessus.Name = 'buttonProcessus'
	$buttonProcessus.Size = '179, 23'
	$buttonProcessus.TabIndex = 9
	$buttonProcessus.Text = 'Processus'
	$buttonProcessus.UseCompatibleTextRendering = $True
	$buttonProcessus.UseVisualStyleBackColor = $True
	$buttonProcessus.add_Click($buttonProcessus_Click)
	#
	# buttonFermerLesSessions
	#
	$buttonFermerLesSessions.Location = '18, 19'
	$buttonFermerLesSessions.Name = 'buttonFermerLesSessions'
	$buttonFermerLesSessions.Size = '179, 23'
	$buttonFermerLesSessions.TabIndex = 8
	$buttonFermerLesSessions.Text = 'Fermer les sessions'
	$buttonFermerLesSessions.UseCompatibleTextRendering = $True
	$buttonFermerLesSessions.UseVisualStyleBackColor = $True
	$buttonFermerLesSessions.add_Click($buttonFermerLesSessions_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($checkboxSessionsActives)
	$groupbox1.Controls.Add($checkboxSessionsInactives)
	$groupbox1.Controls.Add($checkboxSessionsDéconnectés)
	$groupbox1.Location = '430, 61'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '213, 82'
	$groupbox1.TabIndex = 10
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Filtre Affichage'
	$groupbox1.UseCompatibleTextRendering = $True
	#
	# checkboxSessionsActives
	#
	$checkboxSessionsActives.AutoSize = $True
	$checkboxSessionsActives.Checked = $True
	$checkboxSessionsActives.CheckState = 'Checked'
	$checkboxSessionsActives.Location = '13, 55'
	$checkboxSessionsActives.Name = 'checkboxSessionsActives'
	$checkboxSessionsActives.Size = '109, 18'
	$checkboxSessionsActives.TabIndex = 4
	$checkboxSessionsActives.Text = 'Sessions Actives'
	$checkboxSessionsActives.UseCompatibleTextRendering = $True
	$checkboxSessionsActives.UseVisualStyleBackColor = $True
	$checkboxSessionsActives.add_CheckStateChanged($checkboxSessionsActives_CheckStateChanged)
	#
	# checkboxSessionsInactives
	#
	$checkboxSessionsInactives.Checked = $True
	$checkboxSessionsInactives.CheckState = 'Checked'
	$checkboxSessionsInactives.Location = '13, 34'
	$checkboxSessionsInactives.Name = 'checkboxSessionsInactives'
	$checkboxSessionsInactives.Size = '152, 24'
	$checkboxSessionsInactives.TabIndex = 3
	$checkboxSessionsInactives.Text = 'Sessions Inactives'
	$checkboxSessionsInactives.UseCompatibleTextRendering = $True
	$checkboxSessionsInactives.UseVisualStyleBackColor = $True
	$checkboxSessionsInactives.add_CheckStateChanged($checkboxSessionsInactives_CheckStateChanged)
	#
	# checkboxSessionsDéconnectés
	#
	$checkboxSessionsDéconnectés.Checked = $True
	$checkboxSessionsDéconnectés.CheckState = 'Checked'
	$checkboxSessionsDéconnectés.ForeColor = 'ControlText'
	$checkboxSessionsDéconnectés.Location = '12, 14'
	$checkboxSessionsDéconnectés.Name = 'checkboxSessionsDéconnectés'
	$checkboxSessionsDéconnectés.Size = '152, 24'
	$checkboxSessionsDéconnectés.TabIndex = 2
	$checkboxSessionsDéconnectés.Text = 'Sessions Déconnectés'
	$checkboxSessionsDéconnectés.UseCompatibleTextRendering = $True
	$checkboxSessionsDéconnectés.UseVisualStyleBackColor = $True
	$checkboxSessionsDéconnectés.add_CheckStateChanged($checkboxSessionsDéconnectés_CheckStateChanged)
	#
	# labelnsessions
	#
	$labelnsessions.AutoSize = $True
	$labelnsessions.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelnsessions.ForeColor = 'Red'
	$labelnsessions.Location = '116, 14'
	$labelnsessions.Name = 'labelnsessions'
	$labelnsessions.Size = '0, 16'
	$labelnsessions.TabIndex = 9
	$labelnsessions.UseCompatibleTextRendering = $True
	#
	# labelFermesRDS
	#
	$labelFermesRDS.AutoSize = $True
	$labelFermesRDS.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelFermesRDS.Location = '430, 14'
	$labelFermesRDS.Name = 'labelFermesRDS'
	$labelFermesRDS.Size = '72, 17'
	$labelFermesRDS.TabIndex = 7
	$labelFermesRDS.Text = 'Fermes RDS'
	$labelFermesRDS.UseCompatibleTextRendering = $True
	#
	# labelSessionsRDP
	#
	$labelSessionsRDP.AutoSize = $True
	$labelSessionsRDP.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelSessionsRDP.Location = '19, 14'
	$labelSessionsRDP.Name = 'labelSessionsRDP'
	$labelSessionsRDP.Size = '89, 17'
	$labelSessionsRDP.TabIndex = 6
	$labelSessionsRDP.Text = 'Sessions RDP : '
	$labelSessionsRDP.UseCompatibleTextRendering = $True
	#
	# combobox1
	#
	$combobox1.FormattingEnabled = $True
	$combobox1.Location = '430, 31'
	$combobox1.Name = 'combobox1'
	$combobox1.Size = '392, 21'
	$combobox1.TabIndex = 4
	$combobox1.add_SelectedIndexChanged($combobox1_SelectedIndexChanged)
	#
	# buttonQuitter
	#
	$buttonQuitter.DialogResult = 'Cancel'
	$buttonQuitter.Location = '568, 409'
	$buttonQuitter.Name = 'buttonQuitter'
	$buttonQuitter.Size = '75, 23'
	$buttonQuitter.TabIndex = 3
	$buttonQuitter.Text = 'Quitter'
	$buttonQuitter.UseCompatibleTextRendering = $True
	$buttonQuitter.UseVisualStyleBackColor = $True
	#
	# buttonRafraichir
	#
	$buttonRafraichir.Location = '22, 409'
	$buttonRafraichir.Name = 'buttonRafraichir'
	$buttonRafraichir.Size = '397, 23'
	$buttonRafraichir.TabIndex = 2
	$buttonRafraichir.Text = 'Rafraichir'
	$buttonRafraichir.UseCompatibleTextRendering = $True
	$buttonRafraichir.UseVisualStyleBackColor = $True
	$buttonRafraichir.add_Click($buttonRafraichir_Click)
	#
	# listview1
	#
	$listview1.AllowColumnReorder = $True
	[void]$listview1.Columns.Add($Utilisateurs)
	[void]$listview1.Columns.Add($serveurs)
	[void]$listview1.Columns.Add($ID)
	[void]$listview1.Columns.Add($Etat)
	$listview1.ContextMenuStrip = $contextmenustrip1
	$listview1.FullRowSelect = $True
	$listview1.GridLines = $True
	$listview1.Location = '19, 37'
	$listview1.Name = 'listview1'
	$listview1.Size = '397, 366'
	$listview1.Sorting = 'Ascending'
	$listview1.TabIndex = 0
	$listview1.UseCompatibleStateImageBehavior = $False
	$listview1.View = 'Details'
	$listview1.add_ColumnClick($listview1_ColumnClick)
	#
	# Utilisateurs
	#
	$Utilisateurs.Text = 'Utilisateurs'
	$Utilisateurs.Width = 91
	#
	# serveurs
	#
	$serveurs.Text = 'Serveurs RDP'
	$serveurs.Width = 94
	#
	# ID
	#
	$ID.Text = 'ID'
	$ID.Width = 91
	#
	# Etat
	#
	$Etat.Text = 'Etat'
	$Etat.Width = 158
	#
	# contextmenustrip1
	#
	[void]$contextmenustrip1.Items.Add($qqToolStripMenuItem)
	[void]$contextmenustrip1.Items.Add($toolstripmenuitem1)
	[void]$contextmenustrip1.Items.Add($toolstripmenuitem2)
	[void]$contextmenustrip1.Items.Add($télémaintenanceToolStripMenuItem)
	$contextmenustrip1.Name = 'contextmenustrip1'
	$contextmenustrip1.RenderMode = 'Professional'
	$contextmenustrip1.ShowImageMargin = $False
	$contextmenustrip1.Size = '158, 92'
	$contextmenustrip1.add_Opening($contextmenustrip1_Opening)
	#
	# qqToolStripMenuItem
	#
	$qqToolStripMenuItem.Name = 'qqToolStripMenuItem'
	$qqToolStripMenuItem.Size = '157, 22'
	$qqToolStripMenuItem.Text = 'Fermer la session'
	#
	# toolstripmenuitem1
	#
	$toolstripmenuitem1.Name = 'toolstripmenuitem1'
	$toolstripmenuitem1.Size = '157, 22'
	$toolstripmenuitem1.Text = 'Voir les processus'
	#
	# toolstripmenuitem2
	#
	$toolstripmenuitem2.Name = 'toolstripmenuitem2'
	$toolstripmenuitem2.Size = '157, 22'
	$toolstripmenuitem2.Text = 'Envoyer un message'
	#
	# télémaintenanceToolStripMenuItem
	#
	$télémaintenanceToolStripMenuItem.Name = 'télémaintenanceToolStripMenuItem'
	$télémaintenanceToolStripMenuItem.Size = '157, 22'
	$télémaintenanceToolStripMenuItem.Text = 'Télémaintenance'
	$contextmenustrip1.ResumeLayout()
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox3.ResumeLayout()
	$formSessionsRDP.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formSessionsRDP.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formSessionsRDP.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formSessionsRDP.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formSessionsRDP.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formSessionsRDP.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: MsgForm.psf
function Show-MsgForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
AwcAACODCAAAAAAABAC9lcmOo0gQhu9IvIPVV5eKHYzkKgkbgzE7mMXcWBKD2ReD8dN3VfWoZzRz
GGk0qsxLRoQyPoUi/8itBeJmAv3Ch2O4+jgMeVO//SBesR/vMLRabfU+v+Z1WAp5CbSwAu/qcBWa
vnpth3SL/CP6decz/p5LWHeRZVrjZo7b6/ye+7V2HO+Wg3DHC87M7mt3fSX7I9EtHKeLjSSX5D6w
XS+zzol2G5VLPYgemxORHyaPMwwdaX8qsrQXJVWOL3LSyaUtufWlrtmabRHjMm+QLNlc1bFlkEtn
Xnxhf1ZCsbDcAi94e622B0VB+kdfOjBk+yK6+DgRHaWdfVNba8REGUGCx2FN2Zan7mRLdDz67Fnt
ItQ4F+0pXzoE2YQiyaKj1BUlfS+P+XzOQxi66JfeFzeyN6pCKI0HexPcMiB6CulaRTX2zkJ4OqYt
fNwWHou1YWWajslMHifl/ezy4Bk89MGolN6SYUhvnYenkVTQ9c76tOxU7shcLycgImkUu73bVJJx
ISres2++I9dkfkgVHAGFk0mXbnioYRWZ3GZ6Ds7DhCEzNDlLdnH+loqbjNITP9Q6HLudKEXMaDeh
WiA+HcI8l4KGna+Y1bQ1tfRxyxeudPeut0Zwk8r5aioM0ed2rBiLiYYqyJ4tUSie2F33HYPLntqn
BCvdRQZ11FzQR/qAEQS7K5AoWFvuBl3zp6CZD1lGLMKT5AIYEixVWah7P0rPeXLGWD1h9rHN1ZnK
RBljl85iPAbXRR7r0HtlFBSI8mMihzuvmQRlfsY2/mxJw08cGsAQN5I4Teh7jCY1f8JyP7OeOKMg
fG1QQc1vjOeI7ib9sBkC6igiVDUjR4O8O5ihyIXEyWdTQpGhqa5olMKQH6RpvgFXBuxnhi+wk2DE
J6Cppk7gQstPSVlFEZsI8wlb13Ha8OtjSVlImhCbEwraVOMZ+UAfag9vahgajihFIHS8IHaL0umt
Ee8sXqGUVxijX/thaj1EwgFYN80n9yaqew7YguZZOIYcFs3mHs1AsXX/PKQFAkM3eYoj8saeLEfJ
99NHrxfVuCkmW1B4yviE+BBwSSNR/kN1W+RLlF/y5IYBVFGZg+HL/tOzvFdD3PRlHr2s3D9GAfmK
fu6X1f5ejvcevNXgPvZh+bIy7h85Yhks56YA9VvEMCEVUzTGEiRAN+wW+Z317xR7GUZQfQfj1cvr
pJmH18/qh28hfg7S7wH14ZzX1//CQomUSpkUwxIKDYnw31l+VX5LTfumB/8/6Lf568lvkb9+eu8/
ARc5lN0DBwAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formMessages = New-Object 'System.Windows.Forms.Form'
	$buttonAnnuler = New-Object 'System.Windows.Forms.Button'
	$buttonEnvoyer = New-Object 'System.Windows.Forms.Button'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$checkboxEnvoyerLeMessageÀTou = New-Object 'System.Windows.Forms.CheckBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formMessages_Load = {
		#TODO: Initialize Form Controls here
		$serveur = $global:serveur
		$id = $global:id
		$user = $global:user
		$sendall = 0
	}
	
	$checkboxEnvoyerLeMessageÀTou_CheckedChanged={
		#TODO: Place custom script here
		if ($sendall -eq 0)
		{
			$sendall = 1
		}
		else
		{
			$sendall = 0	
		}
		
	}
	
	$buttonEnvoyer_Click={
		#Mise en forme du message
		$njob = 0
		foreach ($item in $listview1.SelectedItems)
		{
			# Créer autant de Job que de commande (Traitements parallèle)
			$njob = $njob + 1
			SendMsg_Sessions  $item.SubItems[1].Text $item.Text $njob
		}
		
		$formMessages.Close()
	}
	
	$buttonAnnuler_Click={
		#TODO: Place custom script here
		$formMessages.Close()
	}
	
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	#endregion
	
	function SendMsg_Sessions
	{
		$serveur = $args[0]
		$userName = $args[1]
		$PowerShellJobN = $args[2]
		$msg = $textbox1.Text
		Write-Host $PowerShellJobN
		
		# Creation de Job pour chaque entrée MultiTread
		Start-Job -Name $PowerShellJobN -ScriptBlock {
			param ($serveur,
				$userName,
				$text)
			msg /SERVER:$serveur $userName $text
		} -ArgumentList ($serveur, $userName, $msg)
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formMessages.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MsgForm_textbox1 = $textbox1.Text
		$script:MsgForm_checkboxEnvoyerLeMessageÀTou = $checkboxEnvoyerLeMessageÀTou.Checked
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonAnnuler.remove_Click($buttonAnnuler_Click)
			$buttonEnvoyer.remove_Click($buttonEnvoyer_Click)
			$checkboxEnvoyerLeMessageÀTou.remove_CheckedChanged($checkboxEnvoyerLeMessageÀTou_CheckedChanged)
			$formMessages.remove_Load($formMessages_Load)
			$formMessages.remove_Load($Form_StateCorrection_Load)
			$formMessages.remove_Closing($Form_StoreValues_Closing)
			$formMessages.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formMessages.SuspendLayout()
	#
	# formMessages
	#
	$formMessages.Controls.Add($buttonAnnuler)
	$formMessages.Controls.Add($buttonEnvoyer)
	$formMessages.Controls.Add($textbox1)
	$formMessages.Controls.Add($checkboxEnvoyerLeMessageÀTou)
	$formMessages.AutoScaleDimensions = '6, 13'
	$formMessages.AutoScaleMode = 'Font'
	$formMessages.ClientSize = '620, 310'
	$formMessages.ControlBox = $False
	$formMessages.Name = 'formMessages'
	$formMessages.StartPosition = 'CenterScreen'
	$formMessages.Text = 'Messages'
	$formMessages.add_Load($formMessages_Load)
	#
	# buttonAnnuler
	#
	$buttonAnnuler.Location = '512, 265'
	$buttonAnnuler.Name = 'buttonAnnuler'
	$buttonAnnuler.Size = '75, 23'
	$buttonAnnuler.TabIndex = 3
	$buttonAnnuler.Text = '&Annuler'
	$buttonAnnuler.UseCompatibleTextRendering = $True
	$buttonAnnuler.UseVisualStyleBackColor = $True
	$buttonAnnuler.add_Click($buttonAnnuler_Click)
	#
	# buttonEnvoyer
	#
	$buttonEnvoyer.Location = '418, 265'
	$buttonEnvoyer.Name = 'buttonEnvoyer'
	$buttonEnvoyer.Size = '75, 23'
	$buttonEnvoyer.TabIndex = 2
	$buttonEnvoyer.Text = 'Envoyer'
	$buttonEnvoyer.UseCompatibleTextRendering = $True
	$buttonEnvoyer.UseVisualStyleBackColor = $True
	$buttonEnvoyer.add_Click($buttonEnvoyer_Click)
	#
	# textbox1
	#
	$textbox1.Font = 'Microsoft Sans Serif, 9.75pt'
	$textbox1.Location = '32, 61'
	$textbox1.Multiline = $True
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '555, 175'
	$textbox1.TabIndex = 1
	#
	# checkboxEnvoyerLeMessageÀTou
	#
	$checkboxEnvoyerLeMessageÀTou.Location = '31, 16'
	$checkboxEnvoyerLeMessageÀTou.Name = 'checkboxEnvoyerLeMessageÀTou'
	$checkboxEnvoyerLeMessageÀTou.Size = '327, 24'
	$checkboxEnvoyerLeMessageÀTou.TabIndex = 0
	$checkboxEnvoyerLeMessageÀTou.Text = 'Envoyer le message à toutes les Sessions'
	$checkboxEnvoyerLeMessageÀTou.UseCompatibleTextRendering = $True
	$checkboxEnvoyerLeMessageÀTou.UseVisualStyleBackColor = $True
	$checkboxEnvoyerLeMessageÀTou.add_CheckedChanged($checkboxEnvoyerLeMessageÀTou_CheckedChanged)
	$formMessages.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formMessages.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formMessages.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formMessages.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formMessages.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formMessages.ShowDialog()

}
#endregion Source: MsgForm.psf

#region Source: ProcessRemote.ps1
function Invoke-ProcessRemote_ps1
{
	<#	
		.NOTES
		===========================================================================
		 Created with: 	SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
		 Created on:   	23/05/2019 11:46
		 Created by:   	administrateur
		 Organization: 	
		 Filename:     	ProcessRemote.ps1
		===========================================================================
		.DESCRIPTION
			A description of the file.
	#>
	
	param (
		$serveur,$user
	)
	
	Write-Host $serveur
	Write-Host $user
	
	$form = New-Object System.Windows.Forms.Form
	$label = New-Object System.Windows.Forms.Label
	
	Import-Module RemoteDesktop
	$grid = Get-WmiObject -Class Win32_Process -ComputerName $serveur | Where-Object { $_.GetOwner().User -eq $user } | Select-Object ProcessName, ProcessId, $serveur, $user | Out-GridView -Title "Select the process to kill" -PassThru
	foreach ($elem in $grid)
	{
		Invoke-Command -computername $serveur -ArgumentList $elem.ProcessId { Stop-Process -Force -Id $args[0] }
		$label.Text = "Processus {0} tué." -f $elem.ProcessName
		$label.AutoSize = $false
		$label.TextAlign = 'MiddleCenter'
		$label.Dock = 'Fill'
		$form.Text = "Opération effectuée"
		$form.Controls.Add($label)
		$form.AutoSize = $true
		$form.Show()
		
	}
	
	
}
#endregion Source: ProcessRemote.ps1

#Start the application
Main ($CommandLine)
