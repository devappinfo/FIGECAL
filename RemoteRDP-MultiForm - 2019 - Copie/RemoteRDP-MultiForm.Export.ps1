#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 49660242-36f1-4571-9038-efb4de726ce7
# Source File: RemoteRDP-MultiForm.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
/QIAAB+LCAAAAAAABAClkt9PgzAQx99N9j+QPpowfgyZi6wPZsHsYbrA4qvp4BhooaQtc/Ovt1Cm
mGlM9OXa73H9fHN3BBEkbA/8uCCS4NGFYQRrzp4hkUZ8rJKcs6p4g3SOQkIFoC4ZFlQCn6PLcS2c
mzaW+kj14RxK2l2yLgoVdSYHWo/lQaLOSFk9AhcFq7A7tgPrJPpvygWWC+zNfN92Pdec+JljeldT
x5zZk2sTsq2XwtT1E5gGVl/cP+072BxrwAo8lCc4o6myM6yhm+hFL43bpqCqcxvhWBIum7ptRnv9
VGnEOeHtuDa8UdOKIAMOVQJhUyVSNTdHy2rPXsC8o2xL6JMaFsL6LtrJ/UL/hhfn7NVckaIKGS8V
L0P4pNoN/BUodgOeFv/AqQ0kIMQncpA4w2qhl/GxPK0eeLErKkLbgntSAo6gZBKixdpcNVQWPa9W
bwLrrHh0EVhffvd39/Itc/0CAAA=#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
     Generated on:       22/05/2019 16:36
     Generated by:       administrateur
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2018
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
6wMAACODCAAAAAAABAC9k0trg0AQx++FfgfJWdRlXU1AhdCQS+mDWtJeRx1l6T7C7prgt69NS1Jo
SUsOMpd5MPPjz8xkT1jrHZphBQ680bFcq3xGAzIrrq88L3swvOMKxJoLvAeJRenAuH4bbK3Nwh/V
Q8/SWpSV4GgP8SkzFOVgHUrf23yR4iD6MN+76YXrDeYKe2dA+N5jP06ob3F41m+o8ipNgdUsIQsa
YzRfZOFx5u+M4A4UdChRuWDZOy3BjcATmfyXTEnV0jlLoKFJjJT9TX7hqtF7G6y1kXYSrSsDe666
S1gRbVmbtoQ0LAIKZ1jS1toIXk2jaLzHSUCvUkwjiBusnTZDiWbHa7zoMM4v6xh+fl4Wfn/u4h27
t81y6wMAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
	Import-Module RemoteDesktop
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
#endregion Source: Globals.ps1

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
dPvnPwG9lUfp7A4AAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formSessionsRDP = New-Object 'System.Windows.Forms.Form'
	$checkedlistbox1 = New-Object 'System.Windows.Forms.CheckedListBox'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonMessageGénéral = New-Object 'System.Windows.Forms.Button'
	$buttonFermerTouteslesSessi = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonMessages = New-Object 'System.Windows.Forms.Button'
	$buttonTélémaintenance = New-Object 'System.Windows.Forms.Button'
	$buttonProcessus = New-Object 'System.Windows.Forms.Button'
	$buttonFermerLesSessions = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$checkboxSessionsActives = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxSessionsInactives = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxSessionsDéconnectés = New-Object 'System.Windows.Forms.CheckBox'
	$labelnsessions = New-Object 'System.Windows.Forms.Label'
	$labelFermesRDS = New-Object 'System.Windows.Forms.Label'
	$labelSessionsRDP = New-Object 'System.Windows.Forms.Label'
	$combobox1 = New-Object 'System.Windows.Forms.ComboBox'
	$buttonQuitter = New-Object 'System.Windows.Forms.Button'
	$buttonRafraichir = New-Object 'System.Windows.Forms.Button'
	$listview1 = New-Object 'System.Windows.Forms.ListView'
	$Utilisateurs = New-Object 'System.Windows.Forms.ColumnHeader'
	$serveurs = New-Object 'System.Windows.Forms.ColumnHeader'
	$ID = New-Object 'System.Windows.Forms.ColumnHeader'
	$Etat = New-Object 'System.Windows.Forms.ColumnHeader'
	$contextmenustrip1 = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$qqToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripmenuitem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripmenuitem2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$télémaintenanceToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formSessionsRDP_Load={
		[string]$ScriptDirectory = Get-ScriptDirectory
		init_proc
	}
	
	#region Control Helper Functions
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	function Load-ComboBox
	{
	<#
	    .SYNOPSIS
	        This functions helps you load items into a ComboBox.
	
	    .DESCRIPTION
	        Use this function to dynamically load items into the ComboBox control.
	
	    .PARAMETER  ComboBox
	        The ComboBox control you want to add items to.
	
	    .PARAMETER  Items
	        The object or objects you wish to load into the ComboBox's Items collection.
	
	    .PARAMETER  DisplayMember
	        Indicates the property to display for the items in this control.
	    
	    .PARAMETER  Append
	        Adds the item(s) to the ComboBox without clearing the Items collection.
	    
	    .EXAMPLE
	        Load-ComboBox $combobox1 "Red", "White", "Blue"
	    
	    .EXAMPLE
	        Load-ComboBox $combobox1 "Red" -Append
	        Load-ComboBox $combobox1 "White" -Append
	        Load-ComboBox $combobox1 "Blue" -Append
	    
	    .EXAMPLE
	        Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>	
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	#region Traitement des Evènements
	$buttonFermerLesSessions_Click={
		#TODO: Place custom script here
		$njob = 0
		Write-Host $listview1.SelectedItems.count
		foreach ($item in $listview1.SelectedItems)
		{
			# Créer autant de Job que de commande (Traitements parallèle)
			$njob = $njob + 1
			close_RDPsessions $item.SubItems[1].Text $item.SubItems[2].text $njob
		}
		# Refresh ListView
		Combo_TRT $combobox1.SelectedItem
	}
	
	$buttonRafraichir_Click={
		Combo_TRT $combobox1.SelectedItem
	}
	
	$combobox1_SelectedIndexChanged ={
		Combo_TRT $combobox1.SelectedItem
	}
	
	$buttonProcessus_Click = {
		# Declaration des variables global avant d'ouvrir le GUI enfant
		$global:serveur = $listview1.SelectedItems[0].SubItems[1].text
		$global:user = $listview1.SelectedItems.text
		$commande = "Z:\Developpement\PowerShell\Remote RDP Sessions\RemoteRDP-MultiForm - 2019 - Copie\ProcessForm.psf"
		$param = $serveur + " " + $user
		Write-Host $param
		& $commande + $param
	}
	
	$buttonTélémaintenance_Click = {
		foreach ($item in $listview1.SelectedItems)
		{
			Rdp_ShadowCopy $item.SubItems[1].Text $item.SubItems[2].text $njob
		}
	}
	
	$buttonMessages_Click = {
		#TODO: Place custom script here
		$global:serveur = $listview1.SelectedItems[0].SubItems[1].text
		$global:user = $listview1.SelectedItems.text
		Show-MsgForm_psf
	}
	
	$listview1_ColumnClick = {
		#Event Argument: $_ = [System.Windows.Forms.ColumnClickEventArgs]
		Write-Host "Ca va la"
		Write-Host ("Column '{0}' was clicked" -f $this.Columns[$_.Column].Text)
		#TODO : trier les colonnes
		Write-Host $this.Columns[$_.Column].Index
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex $this.Columns[$_.Column].Index -SortOrder None  
	}
	
	$checkboxSessionsDéconnectés_CheckStateChanged = {
		#TODO: Place custom script here
		Combo_TRT $combobox1.SelectedItem
	}
	
	$checkboxSessionsInactives_CheckStateChanged = {
		#TODO: Place custom script here
		Combo_TRT $combobox1.SelectedItem
	}
	
	$checkboxSessionsActives_CheckStateChanged = {
		#TODO: Place custom script here
		Combo_TRT $combobox1.SelectedItem
	}
	
	
	#endregion
	
	#region Fonctions du script
	function init_proc
	{
		$global:n = 0
		$global:computername = ""
		$ScrName = (Split-Path -leaf $PSCommandpath)
		$inifileName = ($ScrName.substring(0, $ScrName.length - 4)) + ".inf"
		$inifile = $ScriptDirectory + "\" + $inifileName
		Write-Host $inifile
		$iniContent = read_ini $inifile
		$value = ($iniContent["serveurs"]["Ferme RDP"])
		$tabValueNotChecked = @()
		Write-Host $value
		Load-ComboBox $combobox1 "rdp.figecal.loc", "rdp01.figecal.loc", "FIG-APP01.figecal.loc", "AGO-APP01.figecal.loc", "SRVAPP01.figecal.loc"
		
	}
	
	################################################################################################################
	# Uniquement depuis un serveur broker
	# Utilise le module RemoteDesktop 
	################################################################################################################
	function query_sessions()
	{
		# $args[0] = nom du broker à intérroger
		Write-Host $args[0]
	switch ($args[0])
	{
		"rdp.figecal.loc" { $srv = "srvrdp01.figecal.loc" }
		"rdp01.figecal.loc" { $srv = "srvbroker.figecal.loc" }
		"FIG-APP01.figecal.loc" { $srv = "fig-app01.figecal.loc" }
		"AGO-APP01.figecal.loc" { $srv = "ago-app01.figecal.loc" }
		"SRVAPP01.figecal.loc" { $srv = "srvapp01.figecal.loc" }
	}
	
		$n = 0
		$script:selected = Get-RDUserSession -ConnectionBroker $srv | Sort-Object -Property hostserver | Select-Object sessionId, hostserver, username, sessionstate 
		Write-Host $selected.count
		$tag = New-Object -TypeName PSCustomObject -Property @{ sortOrder = [System.Windows.Forms.SortOrder]::Ascending }
		Write-Host $tag
		foreach ($col in $listview1.Columns)
		{
			$col.Tag = $tag
		}
		ForEach ($Result in $selected)
		{
			#Write-Host $Result.UserName
			
			# Mise en forme du texte état de connexion
			switch ($Result.sessionstate)
			{
				"STATE_DISCONNECTED" { $state = "Déconnecté" }
				"STATE_CONNECTED" { $state = "Inactive" }
				"STATE_ACTIVE" { $state = "Active" }
			}
			
			# Supprime le nom de domaine des nom de serveur
			$hostname = $Result.hostserver.split('.')[0].split('.')
			if ($checkboxSessionsDéconnectés.Checked -eq $false)
			{
				if ($state -eq "Déconnecté")
				{
					continue
				}
			}
			
			if ($checkboxSessionsInactives.Checked -eq $false)
			{
				if ($state -eq "Inactive")
				{
					continue
				}
			}
			
			if ($checkboxSessionsActives.Checked -eq $false)
			{
				if ($state -eq "Active")
				{
					continue
				}
			}
			$n = ($n + 1)
			# Ajoute les éléments à la listview
			Add-ListViewItem $listview1 -Items $Result.username -ImageIndex 0 -SubItems $hostname, $Result.sessionID, $state 
			
		}
		return $n
	}
	
	function read_ini
	{
		$FilePath = $args[0]
		{
			$ini = @{ }
			switch -regex -file $FilePath
			{
				"^\[(.+)\]" # Section
				{
					$section = $matches[1]
					$ini[$section] = @{ }
					$CommentCount = 0
				}
				"^(;.*)$" # Comment
				{
					$value = $matches[1]
					$CommentCount = $CommentCount + 1
					$name = "Comment" + $CommentCount
					$ini[$section][$name] = $value
				}
				"(.+?)\s*=(.*)" # Key
				{
					$name, $value = $matches[1 .. 2]
					$ini[$section][$name] = $value
				}
			}
			return $ini
		}
	}
	
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	function Combo_TRT
	{
		$n = 0
		$listview1.BeginUpdate()
		$listview1.Items.Clear()
		
		$combotxt = $args[0]
		$n = query_sessions ($combotxt)
		$listview1.EndUpdate()
		
		# Inscrit le nombre de sessions listées dans le Label
		Write-Host $n
		$labelnsessions.Text = $n
		$labelnsessions.Update()
	}
	
	function Close_RDPSessions
	{
		$serveur = $args[0]
		$SessionsID = $args[1]
		$PowerShellJobN = $args[2]
		Write-Host $PowerShellJobN
		
		# Creation de Job pour chaque entrée MultiTread
		Start-Job -Name $PowerShellJobN -ScriptBlock {
			param ($serveur,$SessionsID)
			Write-Host $serveur + " " + $SessionsID
			logoff $SessionsID /server:$serveur
		} -ArgumentList ($serveur, $SessionsID)
	}
	
	function Rdp_ShadowCopy
	{
		$serveur = $args[0]
		$SessionsID = $args[1]
		write-host /v:$serveur /Multimon /Shadow:$SessionsID /Control /noConsentPrompt
		mstsc /v:$serveur /Shadow:$SessionsID /Control /noConsentPrompt
	}
	#endregion
	
	
	$contextmenustrip1_Opening=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		Write-Host $contextmenustrip1.Items.Item.Selected.ToString
		Write-Host $
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formSessionsRDP.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_checkedlistbox1 = $checkedlistbox1.SelectedItems
		$script:MainForm_checkboxSessionsActives = $checkboxSessionsActives.Checked
		$script:MainForm_checkboxSessionsInactives = $checkboxSessionsInactives.Checked
		$script:MainForm_checkboxSessionsDéconnectés = $checkboxSessionsDéconnectés.Checked
		$script:MainForm_combobox1 = $combobox1.Text
		$script:MainForm_combobox1_SelectedItem = $combobox1.SelectedItem
		$script:MainForm_listview1 = $listview1.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonMessages.remove_Click($buttonMessages_Click)
			$buttonTélémaintenance.remove_Click($buttonTélémaintenance_Click)
			$buttonProcessus.remove_Click($buttonProcessus_Click)
			$buttonProcessus.remove_MouseClick($buttonProcessus_MouseClick)
			$buttonFermerLesSessions.remove_Click($buttonFermerLesSessions_Click)
			$checkboxSessionsActives.remove_CheckStateChanged($checkboxSessionsActives_CheckStateChanged)
			$checkboxSessionsInactives.remove_CheckStateChanged($checkboxSessionsInactives_CheckStateChanged)
			$checkboxSessionsDéconnectés.remove_CheckStateChanged($checkboxSessionsDéconnectés_CheckStateChanged)
			$combobox1.remove_SelectedIndexChanged($combobox1_SelectedIndexChanged)
			$buttonRafraichir.remove_Click($buttonRafraichir_Click)
			$listview1.remove_ColumnClick($listview1_ColumnClick)
			$formSessionsRDP.remove_Load($formSessionsRDP_Load)
			$contextmenustrip1.remove_Opening($contextmenustrip1_Opening)
			$formSessionsRDP.remove_Load($Form_StateCorrection_Load)
			$formSessionsRDP.remove_Closing($Form_StoreValues_Closing)
			$formSessionsRDP.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formSessionsRDP.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	$contextmenustrip1.SuspendLayout()
	#
	# formSessionsRDP
	#
	$formSessionsRDP.Controls.Add($checkedlistbox1)
	$formSessionsRDP.Controls.Add($statusbar1)
	$formSessionsRDP.Controls.Add($groupbox3)
	$formSessionsRDP.Controls.Add($groupbox2)
	$formSessionsRDP.Controls.Add($groupbox1)
	$formSessionsRDP.Controls.Add($labelnsessions)
	$formSessionsRDP.Controls.Add($labelFermesRDS)
	$formSessionsRDP.Controls.Add($labelSessionsRDP)
	$formSessionsRDP.Controls.Add($combobox1)
	$formSessionsRDP.Controls.Add($buttonQuitter)
	$formSessionsRDP.Controls.Add($buttonRafraichir)
	$formSessionsRDP.Controls.Add($listview1)
	$formSessionsRDP.AutoScaleDimensions = '6, 13'
	$formSessionsRDP.AutoScaleMode = 'Font'
	$formSessionsRDP.AutoSize = $True
	$formSessionsRDP.CancelButton = $buttonQuitter
	$formSessionsRDP.ClientSize = '834, 456'
	$formSessionsRDP.MaximizeBox = $False
	$formSessionsRDP.MaximumSize = '850, 495'
	$formSessionsRDP.MinimumSize = '650, 495'
	$formSessionsRDP.Name = 'formSessionsRDP'
	$formSessionsRDP.StartPosition = 'CenterScreen'
	$formSessionsRDP.Text = 'Sessions RDP'
	$formSessionsRDP.add_Load($formSessionsRDP_Load)
	#
	# checkedlistbox1
	#
	$checkedlistbox1.FormattingEnabled = $True
	[void]$checkedlistbox1.Items.Add('fsfdsf')
	[void]$checkedlistbox1.Items.Add('sff')
	[void]$checkedlistbox1.Items.Add('sfs')
	[void]$checkedlistbox1.Items.Add('')
	[void]$checkedlistbox1.Items.Add('v')
	[void]$checkedlistbox1.Items.Add('x')
	[void]$checkedlistbox1.Items.Add('v')
	[void]$checkedlistbox1.Items.Add('v')
	[void]$checkedlistbox1.Items.Add('')
	[void]$checkedlistbox1.Items.Add('x')
	[void]$checkedlistbox1.Items.Add('')
	[void]$checkedlistbox1.Items.Add('')
	[void]$checkedlistbox1.Items.Add('xvvxvxvxvxcvxv')
	[void]$checkedlistbox1.Items.Add('')
	[void]$checkedlistbox1.Items.Add('xvxvxv')
	$checkedlistbox1.Location = '668, 61'
	$checkedlistbox1.Name = 'checkedlistbox1'
	$checkedlistbox1.Size = '154, 124'
	$checkedlistbox1.TabIndex = 14
	$checkedlistbox1.UseCompatibleTextRendering = $True
	#
	# statusbar1
	#
	$statusbar1.Location = '0, 434'
	$statusbar1.Name = 'statusbar1'
	$statusbar1.ShowPanels = $True
	$statusbar1.Size = '834, 22'
	$statusbar1.TabIndex = 13
	$statusbar1.Text = 'FIGECAL 2018 - NPT'
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($buttonMessageGénéral)
	$groupbox3.Controls.Add($buttonFermerTouteslesSessi)
	$groupbox3.Location = '430, 310'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Size = '213, 88'
	$groupbox3.TabIndex = 12
	$groupbox3.TabStop = $False
	$groupbox3.Text = 'Actions sur les Serveurs'
	$groupbox3.UseCompatibleTextRendering = $True
	#
	# buttonMessageGénéral
	#
	$buttonMessageGénéral.Location = '17, 54'
	$buttonMessageGénéral.Name = 'buttonMessageGénéral'
	$buttonMessageGénéral.Size = '179, 23'
	$buttonMessageGénéral.TabIndex = 12
	$buttonMessageGénéral.Text = 'Message général'
	$buttonMessageGénéral.UseCompatibleTextRendering = $True
	$buttonMessageGénéral.UseVisualStyleBackColor = $True
	#
	# buttonFermerTouteslesSessi
	#
	$buttonFermerTouteslesSessi.Location = '17, 21'
	$buttonFermerTouteslesSessi.Name = 'buttonFermerTouteslesSessi'
	$buttonFermerTouteslesSessi.Size = '179, 23'
	$buttonFermerTouteslesSessi.TabIndex = 9
	$buttonFermerTouteslesSessi.Text = 'Fermer toutes les sessions'
	$buttonFermerTouteslesSessi.UseCompatibleTextRendering = $True
	$buttonFermerTouteslesSessi.UseVisualStyleBackColor = $True
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($buttonMessages)
	$groupbox2.Controls.Add($buttonTélémaintenance)
	$groupbox2.Controls.Add($buttonProcessus)
	$groupbox2.Controls.Add($buttonFermerLesSessions)
	$groupbox2.Location = '430, 149'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '213, 155'
	$groupbox2.TabIndex = 11
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'Actions sur les sessions'
	$groupbox2.UseCompatibleTextRendering = $True
	#
	# buttonMessages
	#
	$buttonMessages.Location = '18, 119'
	$buttonMessages.Name = 'buttonMessages'
	$buttonMessages.Size = '179, 23'
	$buttonMessages.TabIndex = 11
	$buttonMessages.Text = 'Messages'
	$buttonMessages.UseCompatibleTextRendering = $True
	$buttonMessages.UseVisualStyleBackColor = $True
	$buttonMessages.add_Click($buttonMessages_Click)
	#
	# buttonTélémaintenance
	#
	$buttonTélémaintenance.Location = '18, 85'
	$buttonTélémaintenance.Name = 'buttonTélémaintenance'
	$buttonTélémaintenance.Size = '179, 23'
	$buttonTélémaintenance.TabIndex = 10
	$buttonTélémaintenance.Text = 'Télémaintenance'
	$buttonTélémaintenance.UseCompatibleTextRendering = $True
	$buttonTélémaintenance.UseVisualStyleBackColor = $True
	$buttonTélémaintenance.add_Click($buttonTélémaintenance_Click)
	#
	# buttonProcessus
	#
	$buttonProcessus.Location = '18, 51'
	$buttonProcessus.Name = 'buttonProcessus'
	$buttonProcessus.Size = '179, 23'
	$buttonProcessus.TabIndex = 9
	$buttonProcessus.Text = 'Processus'
	$buttonProcessus.UseCompatibleTextRendering = $True
	$buttonProcessus.UseVisualStyleBackColor = $True
	$buttonProcessus.add_Click($buttonProcessus_Click)
	$buttonProcessus.add_MouseClick($buttonProcessus_MouseClick)
	#
	# buttonFermerLesSessions
	#
	$buttonFermerLesSessions.Location = '18, 19'
	$buttonFermerLesSessions.Name = 'buttonFermerLesSessions'
	$buttonFermerLesSessions.Size = '179, 23'
	$buttonFermerLesSessions.TabIndex = 8
	$buttonFermerLesSessions.Text = 'Fermer les sessions'
	$buttonFermerLesSessions.UseCompatibleTextRendering = $True
	$buttonFermerLesSessions.UseVisualStyleBackColor = $True
	$buttonFermerLesSessions.add_Click($buttonFermerLesSessions_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($checkboxSessionsActives)
	$groupbox1.Controls.Add($checkboxSessionsInactives)
	$groupbox1.Controls.Add($checkboxSessionsDéconnectés)
	$groupbox1.Location = '430, 61'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '213, 82'
	$groupbox1.TabIndex = 10
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Filtre Affichage'
	$groupbox1.UseCompatibleTextRendering = $True
	#
	# checkboxSessionsActives
	#
	$checkboxSessionsActives.AutoSize = $True
	$checkboxSessionsActives.Checked = $True
	$checkboxSessionsActives.CheckState = 'Checked'
	$checkboxSessionsActives.Location = '13, 55'
	$checkboxSessionsActives.Name = 'checkboxSessionsActives'
	$checkboxSessionsActives.Size = '109, 18'
	$checkboxSessionsActives.TabIndex = 4
	$checkboxSessionsActives.Text = 'Sessions Actives'
	$checkboxSessionsActives.UseCompatibleTextRendering = $True
	$checkboxSessionsActives.UseVisualStyleBackColor = $True
	$checkboxSessionsActives.add_CheckStateChanged($checkboxSessionsActives_CheckStateChanged)
	#
	# checkboxSessionsInactives
	#
	$checkboxSessionsInactives.Checked = $True
	$checkboxSessionsInactives.CheckState = 'Checked'
	$checkboxSessionsInactives.Location = '13, 34'
	$checkboxSessionsInactives.Name = 'checkboxSessionsInactives'
	$checkboxSessionsInactives.Size = '152, 24'
	$checkboxSessionsInactives.TabIndex = 3
	$checkboxSessionsInactives.Text = 'Sessions Inactives'
	$checkboxSessionsInactives.UseCompatibleTextRendering = $True
	$checkboxSessionsInactives.UseVisualStyleBackColor = $True
	$checkboxSessionsInactives.add_CheckStateChanged($checkboxSessionsInactives_CheckStateChanged)
	#
	# checkboxSessionsDéconnectés
	#
	$checkboxSessionsDéconnectés.Checked = $True
	$checkboxSessionsDéconnectés.CheckState = 'Checked'
	$checkboxSessionsDéconnectés.ForeColor = 'ControlText'
	$checkboxSessionsDéconnectés.Location = '12, 14'
	$checkboxSessionsDéconnectés.Name = 'checkboxSessionsDéconnectés'
	$checkboxSessionsDéconnectés.Size = '152, 24'
	$checkboxSessionsDéconnectés.TabIndex = 2
	$checkboxSessionsDéconnectés.Text = 'Sessions Déconnectés'
	$checkboxSessionsDéconnectés.UseCompatibleTextRendering = $True
	$checkboxSessionsDéconnectés.UseVisualStyleBackColor = $True
	$checkboxSessionsDéconnectés.add_CheckStateChanged($checkboxSessionsDéconnectés_CheckStateChanged)
	#
	# labelnsessions
	#
	$labelnsessions.AutoSize = $True
	$labelnsessions.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelnsessions.ForeColor = 'Red'
	$labelnsessions.Location = '116, 14'
	$labelnsessions.Name = 'labelnsessions'
	$labelnsessions.Size = '0, 16'
	$labelnsessions.TabIndex = 9
	$labelnsessions.UseCompatibleTextRendering = $True
	#
	# labelFermesRDS
	#
	$labelFermesRDS.AutoSize = $True
	$labelFermesRDS.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelFermesRDS.Location = '430, 14'
	$labelFermesRDS.Name = 'labelFermesRDS'
	$labelFermesRDS.Size = '72, 17'
	$labelFermesRDS.TabIndex = 7
	$labelFermesRDS.Text = 'Fermes RDS'
	$labelFermesRDS.UseCompatibleTextRendering = $True
	#
	# labelSessionsRDP
	#
	$labelSessionsRDP.AutoSize = $True
	$labelSessionsRDP.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelSessionsRDP.Location = '19, 14'
	$labelSessionsRDP.Name = 'labelSessionsRDP'
	$labelSessionsRDP.Size = '89, 17'
	$labelSessionsRDP.TabIndex = 6
	$labelSessionsRDP.Text = 'Sessions RDP : '
	$labelSessionsRDP.UseCompatibleTextRendering = $True
	#
	# combobox1
	#
	$combobox1.FormattingEnabled = $True
	$combobox1.Location = '430, 31'
	$combobox1.Name = 'combobox1'
	$combobox1.Size = '392, 21'
	$combobox1.TabIndex = 4
	$combobox1.add_SelectedIndexChanged($combobox1_SelectedIndexChanged)
	#
	# buttonQuitter
	#
	$buttonQuitter.DialogResult = 'Cancel'
	$buttonQuitter.Location = '568, 409'
	$buttonQuitter.Name = 'buttonQuitter'
	$buttonQuitter.Size = '75, 23'
	$buttonQuitter.TabIndex = 3
	$buttonQuitter.Text = 'Quitter'
	$buttonQuitter.UseCompatibleTextRendering = $True
	$buttonQuitter.UseVisualStyleBackColor = $True
	#
	# buttonRafraichir
	#
	$buttonRafraichir.Location = '22, 409'
	$buttonRafraichir.Name = 'buttonRafraichir'
	$buttonRafraichir.Size = '397, 23'
	$buttonRafraichir.TabIndex = 2
	$buttonRafraichir.Text = 'Rafraichir'
	$buttonRafraichir.UseCompatibleTextRendering = $True
	$buttonRafraichir.UseVisualStyleBackColor = $True
	$buttonRafraichir.add_Click($buttonRafraichir_Click)
	#
	# listview1
	#
	$listview1.AllowColumnReorder = $True
	[void]$listview1.Columns.Add($Utilisateurs)
	[void]$listview1.Columns.Add($serveurs)
	[void]$listview1.Columns.Add($ID)
	[void]$listview1.Columns.Add($Etat)
	$listview1.ContextMenuStrip = $contextmenustrip1
	$listview1.FullRowSelect = $True
	$listview1.GridLines = $True
	$listview1.Location = '19, 37'
	$listview1.Name = 'listview1'
	$listview1.Size = '397, 366'
	$listview1.Sorting = 'Ascending'
	$listview1.TabIndex = 0
	$listview1.UseCompatibleStateImageBehavior = $False
	$listview1.View = 'Details'
	$listview1.add_ColumnClick($listview1_ColumnClick)
	#
	# Utilisateurs
	#
	$Utilisateurs.Text = 'Utilisateurs'
	$Utilisateurs.Width = 91
	#
	# serveurs
	#
	$serveurs.Text = 'Serveurs RDP'
	$serveurs.Width = 94
	#
	# ID
	#
	$ID.Text = 'ID'
	$ID.Width = 91
	#
	# Etat
	#
	$Etat.Text = 'Etat'
	$Etat.Width = 158
	#
	# contextmenustrip1
	#
	[void]$contextmenustrip1.Items.Add($qqToolStripMenuItem)
	[void]$contextmenustrip1.Items.Add($toolstripmenuitem1)
	[void]$contextmenustrip1.Items.Add($toolstripmenuitem2)
	[void]$contextmenustrip1.Items.Add($télémaintenanceToolStripMenuItem)
	$contextmenustrip1.Name = 'contextmenustrip1'
	$contextmenustrip1.RenderMode = 'Professional'
	$contextmenustrip1.ShowImageMargin = $False
	$contextmenustrip1.Size = '158, 92'
	$contextmenustrip1.add_Opening($contextmenustrip1_Opening)
	#
	# qqToolStripMenuItem
	#
	$qqToolStripMenuItem.Name = 'qqToolStripMenuItem'
	$qqToolStripMenuItem.Size = '157, 22'
	$qqToolStripMenuItem.Text = 'Fermer la session'
	#
	# toolstripmenuitem1
	#
	$toolstripmenuitem1.Name = 'toolstripmenuitem1'
	$toolstripmenuitem1.Size = '157, 22'
	$toolstripmenuitem1.Text = 'Voir les processus'
	#
	# toolstripmenuitem2
	#
	$toolstripmenuitem2.Name = 'toolstripmenuitem2'
	$toolstripmenuitem2.Size = '157, 22'
	$toolstripmenuitem2.Text = 'Envoyer un message'
	#
	# télémaintenanceToolStripMenuItem
	#
	$télémaintenanceToolStripMenuItem.Name = 'télémaintenanceToolStripMenuItem'
	$télémaintenanceToolStripMenuItem.Size = '157, 22'
	$télémaintenanceToolStripMenuItem.Text = 'Télémaintenance'
	$contextmenustrip1.ResumeLayout()
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox3.ResumeLayout()
	$formSessionsRDP.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formSessionsRDP.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formSessionsRDP.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formSessionsRDP.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formSessionsRDP.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formSessionsRDP.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: MsgForm.psf
function Show-MsgForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
gw8AACODCAAAAAAABADVl91u2jAUx+8n7R2sXOwKASEEWg0itWkrTStb1bBud5WTHKiHYyPbacuu
9ih7l77YTkjoSmlJiijqhISIOcf/8/HzSdI7h0heg5odUUMJ/tBMir7l1G3Le/+OkN5XxcZMUH7C
OHyhCXgDPT6RKqlP9ajXWPk39wl/QmSImU2hbwUzbSCpf2cilje6nvnm3zXy1F81clEE0a43s0+N
+Ck3qYK+gNQoymvkLA05iz7DbCgnIPpht0vdyO3Y+04bmnv7FhEYSt8a4X4D0JqOQVskumI8Vmhu
+VIYJbnOM8R4z5ScgjKzwu8gNTKIKIcjloDIYkHTTo3YTq+xMC1zHcgYLO8ElUp9fM5AmID9QodO
C/N17Ga5U57DobxFFco1lHpk7bG8hzUpdQkMVeZMamawBpbnY5iggkgBiFLfIdway3te6vgadyts
TyWNl0O7zJZ6jbnRwqOcqsPUGClenatwLnMgRMpBrQNrtSqnMqJ5MV27VSOtjrtSmec6t6RawSsH
quuiyiq3T/SLhp9EDIhTJet5dz/QZPqxekTfNPgymWIBQg7ZDueAioqJseUNVbqK8JNbXDCdUh6Y
GYdDGk18yaV63v8hZnjQosmjQl7OFx+R1shRe6PgHYtrOdscvLa9twl4heprgteqDF71YN4Uc0XY
22EuSwbH/6tDZ1AnlLf2y3jL7nw4/lmkpJYjQwIqNAmw8KMa2a933enqfXEdtA4Oy45dwWWAWTLO
BFRubw75IsvKfLsuAm53qxyjf4Svbv/yvvtXEE120fgoE8KaFNSeQnFzvvs9lOmm08exsWqdym1Z
G0PlXjmtLg6j9otatfoIVjKMCAeS5NGRuz/EyNSAxsUMez1/iPwfxlVWb4j9KyrGEJfU/3LZes1A
W7440BoSRBD0wrZYmXmJjqTiLNwCxr3G/a6PVfKDswuNrR/OcsXsRW43QoreIJibaDWdkTvqjmw7
dpvUoeVaPxK+k5x8qWD7QveXOfK9xsOXbu8vbxgnXYMPAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formMessages = New-Object 'System.Windows.Forms.Form'
	$buttonAnnuler = New-Object 'System.Windows.Forms.Button'
	$buttonEnvoyer = New-Object 'System.Windows.Forms.Button'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$checkboxEnvoyerLeMessageÀTou = New-Object 'System.Windows.Forms.CheckBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formMessages_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	$checkboxEnvoyerLeMessageÀTou_CheckedChanged={
		#TODO: Place custom script here
		$sendall = 1
	}
	
	$buttonEnvoyer_Click={
		
		#Mise en forme du message
		msg $sessions /server:$serveur $message 
	}
	
	$buttonAnnuler_Click={
		#TODO: Place custom script here
		$formMessages.Close()
	}
	
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	#endregion
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formMessages.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MsgForm_textbox1 = $textbox1.Text
		$script:MsgForm_checkboxEnvoyerLeMessageÀTou = $checkboxEnvoyerLeMessageÀTou.Checked
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonAnnuler.remove_Click($buttonAnnuler_Click)
			$buttonEnvoyer.remove_Click($buttonEnvoyer_Click)
			$checkboxEnvoyerLeMessageÀTou.remove_CheckedChanged($checkboxEnvoyerLeMessageÀTou_CheckedChanged)
			$formMessages.remove_Load($formMessages_Load)
			$formMessages.remove_Load($Form_StateCorrection_Load)
			$formMessages.remove_Closing($Form_StoreValues_Closing)
			$formMessages.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formMessages.SuspendLayout()
	#
	# formMessages
	#
	$formMessages.Controls.Add($buttonAnnuler)
	$formMessages.Controls.Add($buttonEnvoyer)
	$formMessages.Controls.Add($textbox1)
	$formMessages.Controls.Add($checkboxEnvoyerLeMessageÀTou)
	$formMessages.AutoScaleDimensions = '6, 13'
	$formMessages.AutoScaleMode = 'Font'
	$formMessages.ClientSize = '620, 310'
	$formMessages.ControlBox = $False
	$formMessages.Name = 'formMessages'
	$formMessages.StartPosition = 'CenterScreen'
	$formMessages.Text = 'Messages'
	$formMessages.add_Load($formMessages_Load)
	#
	# buttonAnnuler
	#
	$buttonAnnuler.Location = '512, 265'
	$buttonAnnuler.Name = 'buttonAnnuler'
	$buttonAnnuler.Size = '75, 23'
	$buttonAnnuler.TabIndex = 3
	$buttonAnnuler.Text = '&Annuler'
	$buttonAnnuler.UseCompatibleTextRendering = $True
	$buttonAnnuler.UseVisualStyleBackColor = $True
	$buttonAnnuler.add_Click($buttonAnnuler_Click)
	#
	# buttonEnvoyer
	#
	$buttonEnvoyer.Location = '418, 265'
	$buttonEnvoyer.Name = 'buttonEnvoyer'
	$buttonEnvoyer.Size = '75, 23'
	$buttonEnvoyer.TabIndex = 2
	$buttonEnvoyer.Text = 'Envoyer'
	$buttonEnvoyer.UseCompatibleTextRendering = $True
	$buttonEnvoyer.UseVisualStyleBackColor = $True
	$buttonEnvoyer.add_Click($buttonEnvoyer_Click)
	#
	# textbox1
	#
	$textbox1.Font = 'Microsoft Sans Serif, 9.75pt'
	$textbox1.Location = '32, 61'
	$textbox1.Multiline = $True
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '555, 175'
	$textbox1.TabIndex = 1
	#
	# checkboxEnvoyerLeMessageÀTou
	#
	$checkboxEnvoyerLeMessageÀTou.Location = '31, 16'
	$checkboxEnvoyerLeMessageÀTou.Name = 'checkboxEnvoyerLeMessageÀTou'
	$checkboxEnvoyerLeMessageÀTou.Size = '327, 24'
	$checkboxEnvoyerLeMessageÀTou.TabIndex = 0
	$checkboxEnvoyerLeMessageÀTou.Text = 'Envoyer le message à toutes les Sessions'
	$checkboxEnvoyerLeMessageÀTou.UseCompatibleTextRendering = $True
	$checkboxEnvoyerLeMessageÀTou.UseVisualStyleBackColor = $True
	$checkboxEnvoyerLeMessageÀTou.add_CheckedChanged($checkboxEnvoyerLeMessageÀTou_CheckedChanged)
	$formMessages.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formMessages.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formMessages.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formMessages.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formMessages.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formMessages.ShowDialog()

}
#endregion Source: MsgForm.psf

#region Source: ProcessForm.psf
function Show-ProcessForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
uAMAACODCAAAAAAABABlk8eOq1gQhvdIvEPrbpEuOVhyt0S0AZNsgvGOcMAYMIdggp9+uns2I02p
FqUK0i/99e3PIOtmMGxKMiUf38VYdc/PP/Rf8s8Xinx87J2hKqtn0mhVA+ykBV/u0GVgHLVuaP/C
sdjj/9v4vfuZf0HCy0iv7tRyEUXZUWTx35BEJQ8bcqYeYlDcMAKnFNYB5tsz1DK4F4dqTKhqUl6j
fzJO1/s7PcR84KZDTjglilwYtQWgJvr6fnZHfp1BATD7TcwjiXkH2cZwJtdTmrhPD1udh4Bey1MA
Ar7htKQVoMddyp2D+YHJFBmKlP4t2wpWg7c4U2atiiPLLrx2JYOFYeUEyGdWuI9kgHv+7UkH3CBF
BDWHL2Ex+oYkTUMfF6F0XjlnhygiWql6h0a5BFGnBsLOSMhomaTpBculg0nJR7fjrPeTUFptbImP
Wq03+UDw0ObHsCg8/dVdNc8g72sFUaR2LEOZThyuZBdqiFqP7e28OkKT5SBGrJUeZeaDTTinqFyT
WGtpZQbtzqgvFQO7BKakwV5oZ1xtPHFQZMGHENuIhRA7hSxsrkiMxusr8sel7dulY2y2fOMfM+0C
VJZOx4cx6NRFVWfXrK/mq4wOJblNhlG5Fooknu6WdqDHRkEP64Mw2now8nDkp6DGrpbPMDbwkndR
wnO64erjNif2Zte3lao8k0tV9z4fvPodUCWQUOTa2FxO8xdXWt9yEhMM2x9rMZXGXuIt6mgSVtzH
cvuga4V2IXM57Z50TTlhbPrvLr9Cpz+vUdyXkxNuKOJPxKAyoiWkuppksNXXp6zT4bc+mZYeS3gK
j4KvS7OQWfk5WpwjpUhh84ZPEbYGQSaZV9FlSmg1bekoYvER6+JXLBZhSLwPAf5khNfWAh/ftXBd
2BTjrKLTc9LhcHKIaaZZG2cnslzW/ySluHK2cymS8084ijwijwDaM8On7/9bZNoP5OKXD/Hzc4//
YvMLkDiOoE2bCowf+Hdnj/+X1K9/AP49lsi4AwAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formProcessus = New-Object 'System.Windows.Forms.Form'
	$listview1 = New-Object 'System.Windows.Forms.ListView'
	$queryProc = New-Object 'System.Windows.Forms.ColumnHeader'
	$Serveur = New-Object 'System.Windows.Forms.ColumnHeader'
	$Utilisateur = New-Object 'System.Windows.Forms.ColumnHeader'
	$ProcessID = New-Object 'System.Windows.Forms.ColumnHeader'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formProcessus_Load={
		#TODO: Initialize Form Controls here
		if ($args -eq $null)
		{
			#Message pas d'arguments	
		}
		else
		{
			$serveur = $args[0]
			$user = $args[1]
			User_Process
		}
	}
	
	#region Control Helper Functions
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	#endregion
	
	function User_Process
	{
		$proc = Get-WmiObject -Class Win32_Process -ComputerName $serveur | Where-Object { $_.GetOwner().User -eq $user }
		ForEach ($queryproc in $proc)
		{
			Add-ListViewItem $listview1 -Items $queryproc.ProcessName -SubItems $serveur, $user, $queryproc.ProcessId
		}
	}
	
	$listview1_SelectedIndexChanged={
		#TODO: Place custom script here
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formProcessus.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:ProcessForm_listview1 = $listview1.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$listview1.remove_SelectedIndexChanged($listview1_SelectedIndexChanged)
			$formProcessus.remove_Load($formProcessus_Load)
			$formProcessus.remove_Load($Form_StateCorrection_Load)
			$formProcessus.remove_Closing($Form_StoreValues_Closing)
			$formProcessus.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formProcessus.SuspendLayout()
	#
	# formProcessus
	#
	$formProcessus.Controls.Add($listview1)
	$formProcessus.AutoScaleDimensions = '6, 13'
	$formProcessus.AutoScaleMode = 'Font'
	$formProcessus.ClientSize = '603, 326'
	$formProcessus.Name = 'formProcessus'
	$formProcessus.Text = 'Processus'
	$formProcessus.add_Load($formProcessus_Load)
	#
	# listview1
	#
	$listview1.AllowColumnReorder = $True
	[void]$listview1.Columns.Add($queryProc)
	[void]$listview1.Columns.Add($Serveur)
	[void]$listview1.Columns.Add($Utilisateur)
	[void]$listview1.Columns.Add($ProcessID)
	$listview1.FullRowSelect = $True
	$listview1.GridLines = $True
	$listview1.HideSelection = $False
	$listview1.Location = '12, 33'
	$listview1.Name = 'listview1'
	$listview1.Size = '579, 281'
	$listview1.Sorting = 'Ascending'
	$listview1.TabIndex = 0
	$listview1.UseCompatibleStateImageBehavior = $False
	$listview1.add_SelectedIndexChanged($listview1_SelectedIndexChanged)
	#
	# queryProc
	#
	$queryProc.Text = 'queryProc'
	#
	# Serveur
	#
	$Serveur.Text = 'Serveur'
	#
	# Utilisateur
	#
	$Utilisateur.Text = 'Utilisateur'
	#
	# ProcessID
	#
	$ProcessID.Text = 'Process ID'
	$formProcessus.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formProcessus.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formProcessus.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formProcessus.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formProcessus.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formProcessus.ShowDialog()

}
#endregion Source: ProcessForm.psf

#Start the application
Main ($CommandLine)
