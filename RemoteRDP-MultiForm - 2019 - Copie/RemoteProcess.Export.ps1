#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 0d80c1fc-18dd-4f8e-a8c4-4f71b233c86e
# Source File: RemoteProcess.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
9QEAAB+LCAAAAAAABACFkc1vwiAchu8m/g+Ee6VVs/WAHBbTxcM+0ppdDdJfJxuFBqiL//1wpYtm
W3b7PeHlefmgJQhzBHtac8/ZdIIQfbbmDYT/goAvYJ00ms1nKSUjxLVCKtisWVrnqcgakWR5XSfL
JoeE52IZpttsP18sRH4DlMRw3BpbtqcOWBBf4ig3qg51iFy2uQgR0V0vVb3CKWaV59b33axzbuj6
K4mqA7cQxq3tAaMSGrCgBRS9Fj5cboU3+mjeIblXZs/VrnMZZsPsgj37x/6LrzqYj+SBS10Y2wZf
g9lIQdhcCQcYrvn9LAM9WfkqNVfnwCNvgZXQGg8hI8Cdj9aFNCU/YtMJJVff/AmEn3kF9QEAAA==#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.140
     Generated on:       25/01/2018 23:18
     Generated by:       npt
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2017
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
2gMAAB+LCAAAAAAABAC9k0tLAzEQgO+C/yH0vGR33a5rIbsglV4EFVfUazadLcE8yiRpyb+3rVJF
QaGHMJd5MPMxL/YIwm4A4w33nOwUJ61pJxe0nHTnZ4Swe5QrabhaSAV3XEPXe44+rOnaOZb/ih5y
rp0DPSgJ7mB/eWKnnbCo5JCR50/WlBZ7ycg8KB8QWgPBI1cZeQi7GuIW4pN9A9MOTcNrUV+Ws2oK
xdWM5ceqPyl9dB50CgZ9kWZpt44uLGqXhLjfVBoQ8q00q1NYRTXWYzOW5bIueMX/Z71qlaSnuUVI
MzyJILzF2ANupICTbuPvMR7Nj0dj+fdf7t4BtbYVHtoDAAA=#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
#endregion Source: Globals.ps1

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
WRgAAB+LCAAAAAAABADdWdtu4kgQfR9p/6Hlh31CgDGXRAOWAmx2oiGzM5DLvo0auyC9aXej7jYJ
8/VbvpCLTbA9CtFkhIQMruo6dep0VRv6U/DkGtRmTA0leKGZFAOrVbct948PhPT/UWzJBOWnjMMX
GoB7Tpk4lSqor/Si38jdTpzm/4FniNmsYGDNNtpAUL9mwpd3uh75Ju81sutWjVylKNr1ZvSqkVHI
TahgICA0ivIa+RrOOfM+w+ZC3oIYzHs92vE6XfvYaUPz6NgiAqEMrAWuZ1vEu2HcV2hnjaQwSnKd
5IZAvyq5AmU2qcNJaOTMoxzGLAARgUDTbo3YTr+xNS1yPZc+WO4pRir0GVHhAR+GxkixhYRWU1gA
wvUgNZvHBt9CZgwoizS2qxUuzxkIM2M/EE+36dSI0+0VOp3Texagy1DeYxaUayh0iepuuTHZhbYX
cG8idlSQN/1rjXBTu4mkfrrm9+i634jvbk2LBZawenCJZWrzstTyVIwZ5XI5BY2hLTfRQo6UvNtE
etSwSDCdJkrTcVolnJISPQNbwiuRTq9TI638BthRWzo/Ez6gbtplrGMl/EmD1cfyiC41XDEdUj4z
Gw5D6t2OJJfKci9UuEOojUQnv6hqLkAFTICaAOL2QOtQV1PQoxTaTg+LdFRRCTsAlFaF3TmqLItS
1rEstsgIB7KqgO3Q+sAFlgrBDKk6uEhWaaw5VXuHWJ4FRAJp3hMcZJWaSqwku3xPeYqymnjsZiXx
5CH94tt7SheKMqxbxbnwWAu79TP9/TFu6Xq07eo9vky1k81cCVC1HZw5NeCJx7vN8/A9/j5zhKgs
ngnT5orB3cHlwzHQGgNV3PXIUxiIJwZocoY49+WU+HwC6sMBG9oTRDuOt16M4SbGYD8eb5MiRQm8
54Rav1tCzu+WUHtvQiU61mnI+VTezYBjA3m5T2W8/lbMn+ARR5f2eD4XKozoh35SbR44pULMpDJM
LC33RHsgfLysNEXKnAFwJIxksMLk5xxmhho4C+gShnBD1ywaDbsfU/MLRd3bcsdgKOP50+SzifD8
Q/FweBtV7+yYe5+0v8gdD9oZy2vmm5voOS9j+W44aO3nYAZqDWH+8PECD0fZH0neDQ/Ofh4uDcNW
gNunPBfH2Rbwbrho7+cifeAlZ+OyVNjN7l4uTrSGAGGC3q6TfrNxA+1Jxdn8FVLtNx5WzUZJyH2L
GK9ewOKI0c/TbxNI0TscYj8Tq+ksOovewrb9TpM6tDjWvwF/k5xGUsHrB3r4mEi+33j6V4L7P48e
DkVZGAAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$buttonQuitter = New-Object 'System.Windows.Forms.Button'
	$buttonTerminerLeProcessus = New-Object 'System.Windows.Forms.Button'
	$progressbar1 = New-Object 'System.Windows.Forms.ProgressBar'
	$buttonRafraichir = New-Object 'System.Windows.Forms.Button'
	$listview1 = New-Object 'System.Windows.Forms.ListView'
	$columnheader1 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader2 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader3 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader4 = New-Object 'System.Windows.Forms.ColumnHeader'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$form1_Load = {
		# Check les arguments de ligne de commande
		if ($args -eq $null){
			# Pas d'arguments - Sortie sur Erreur
			[void][System.Windows.Forms.MessageBox]::Show('Il manque les arguments de ligne de commande', 'Erreur') # Casting the method to [void] suppresses the output. 	
		}
		else{
			$serveur = $args[0]
			$user = $args[1]
			$form1.Text = "Processus de l'utilisateur " + $user + " sur : " + $serveur
			populate_list
		}
			}
	
	#region Control Helper Functions
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	#endregion
	
	#region Traitement des évènements
	$buttonRafraichir_Click = {
		populate_list
	}
	#endregion
	
	#region Fonctions du scripts
	function User_Process
	{
		$proc = Get-WmiObject -Class Win32_Process -ComputerName $serveur | Where-Object { $_.GetOwner().User -eq $user }
		ForEach ($queryproc in $proc)
		{
			Add-ListViewItem $listview -Items $queryproc.ProcessName -SubItems $serveur, $user, $queryproc.ProcessId
		}
	}
	#endregion
	
	function populate_list
	{
		#Init CancelLoop
		$script:CancelLoop = $false
		$buttonCancelProcess.Enabled = $true
		#Disable the button so we don't trigger it again
		$this.Enabled = $false
		#Reset the Progress Bar
		$progressbar1.Value = 0
		
		for ($i = 0; $i -lt $progressbar1.Maximum; $i++)
		{
			#----------------------------------------
			#Place custom script here
			User_Process
			
			#----------------------------------------
			#process the pending message
			[System.Windows.Forms.Application]::DoEvents()
			
			if ($script:CancelLoop -eq $true)
			{
				#Clear the progress bar
				$progressbar1.Value = 0
				#Exit the loop
				break;
			}
			#Step the progress bar
			$progressbar1.PerformStep()
		}
		
		#Enable the button so we can click it again
		$this.Enabled = $true
		$buttonCancelProcess.Enabled = $false
		
		$listview.BeginUpdate()
		$listview.Items.Clear()
		User_Process
		$listview.EndUpdate()
	}
	
	
	
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_listview1 = $listview1.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonRafraichir.remove_Click($buttonRafraichir_Click)
			$form1.remove_Load($form1_Load)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_Closing($Form_StoreValues_Closing)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form1.SuspendLayout()
	#
	# form1
	#
	$form1.Controls.Add($buttonQuitter)
	$form1.Controls.Add($buttonTerminerLeProcessus)
	$form1.Controls.Add($progressbar1)
	$form1.Controls.Add($buttonRafraichir)
	$form1.Controls.Add($listview1)
	$form1.AutoScaleDimensions = '6, 13'
	$form1.AutoScaleMode = 'Font'
	$form1.CancelButton = $buttonQuitter
	$form1.ClientSize = '603, 367'
	$form1.MaximizeBox = $False
	$form1.Name = 'form1'
	$form1.Text = 'Form'
	$form1.add_Load($form1_Load)
	#
	# buttonQuitter
	#
	$buttonQuitter.DialogResult = 'Cancel'
	$buttonQuitter.Location = '506, 332'
	$buttonQuitter.Name = 'buttonQuitter'
	$buttonQuitter.Size = '75, 23'
	$buttonQuitter.TabIndex = 4
	$buttonQuitter.Text = '&Quitter'
	$buttonQuitter.UseVisualStyleBackColor = $True
	#
	# buttonTerminerLeProcessus
	#
	$buttonTerminerLeProcessus.Location = '437, 28'
	$buttonTerminerLeProcessus.Name = 'buttonTerminerLeProcessus'
	$buttonTerminerLeProcessus.Size = '158, 23'
	$buttonTerminerLeProcessus.TabIndex = 3
	$buttonTerminerLeProcessus.Text = 'Terminer le processus'
	$buttonTerminerLeProcessus.UseVisualStyleBackColor = $True
	#
	# progressbar1
	#
	$progressbar1.ForeColor = 'Lime'
	$progressbar1.Location = '437, 12'
	$progressbar1.Name = 'progressbar1'
	$progressbar1.Size = '158, 10'
	$progressbar1.TabIndex = 2
	#
	# buttonRafraichir
	#
	$buttonRafraichir.Location = '12, 332'
	$buttonRafraichir.Name = 'buttonRafraichir'
	$buttonRafraichir.Size = '415, 23'
	$buttonRafraichir.TabIndex = 1
	$buttonRafraichir.Text = 'Rafraichir'
	$buttonRafraichir.UseVisualStyleBackColor = $True
	$buttonRafraichir.add_Click($buttonRafraichir_Click)
	#
	# listview1
	#
	[void]$listview1.Columns.Add($columnheader1)
	[void]$listview1.Columns.Add($columnheader2)
	[void]$listview1.Columns.Add($columnheader3)
	[void]$listview1.Columns.Add($columnheader4)
	$listview1.FullRowSelect = $True
	$listview1.GridLines = $True
	$listview1.Location = '12, 12'
	$listview1.Name = 'listview1'
	$listview1.Size = '415, 312'
	$listview1.Sorting = 'Ascending'
	$listview1.TabIndex = 0
	$listview1.UseCompatibleStateImageBehavior = $False
	$listview1.View = 'Details'
	#
	# columnheader1
	#
	$columnheader1.Text = 'Nom'
	$columnheader1.Width = 75
	#
	# columnheader2
	#
	$columnheader2.Text = 'Serveur'
	$columnheader2.Width = 87
	#
	# columnheader3
	#
	$columnheader3.Text = 'Utilisateur'
	$columnheader3.Width = 92
	#
	# columnheader4
	#
	$columnheader4.Text = 'Process ID'
	$columnheader4.Width = 106
	$form1.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form1.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form1.ShowDialog()

}
#endregion Source: MainForm.psf

#Start the application
Main ($CommandLine)
