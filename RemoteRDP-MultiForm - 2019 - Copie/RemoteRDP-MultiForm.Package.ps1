#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 49660242-36f1-4571-9038-efb4de726ce7
# Source File: \\srvdc01\informatique$\Developpement\PowerShell\Remote RDP Sessions\RemoteRDP-MultiForm - 2019\RemoteRDP-MultiForm.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
pgIAAB+LCAAAAAAABACdkl9PgzAUxd9N9h1IH00Yf4bMRdYHs2D2MF1g8dV0cBnV0pJS5uant1Bm
ZqYx8eW2p9z+Tu4pUQKZ2IM8LogieHRlWdFailfIlJUeeVZKwekH5HMUE9YA6g9jyhTIOboe1413
19XKLLlZvEPF+k3R10ZXc1ICq8fqoFBvpK2eQTZUcOyP3cg5ieGbdoHlAgezMHT9wLcnYeHZwc3U
s2fu5NaGYhvkMPXDDKaRMzQPV4cJNscasAafyxNcsFzbWc65WzOIQVr3LWV6chfhVBGp2robxnj9
1mmlJZFdXBvZ6rQSKEACzyBueab0cHO05HvxBvYDE1vCXnRYCJt90yX3B/0HXlqKd3tFKI+FrDSv
QPikuhf4L7DZnfGMuMAZYVL7StmoJ0l3lBPWNTySCnAClVCQLNb2qmWKDrxa34mci+bRVeR8+y8/
ARbYf2qmAgAA#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
     Generated on:       18/02/2019 23:56
     Generated by:       administrateur
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2018
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
6wMAACODCAAAAAAABAC9k0trg0AQx++FfgfJWdRlXU1AhdCQS+mDWtJeRx1l6T7C7prgt69NS1Jo
SUsOMpd5MPPjz8xkT1jrHZphBQ680bFcq3xGAzIrrq88L3swvOMKxJoLvAeJRenAuH4bbK3Nwh/V
Q8/SWpSV4GgP8SkzFOVgHUrf23yR4iD6MN+76YXrDeYKe2dA+N5jP06ob3F41m+o8ipNgdUsIQsa
YzRfZOFx5u+M4A4UdChRuWDZOy3BjcATmfyXTEnV0jlLoKFJjJT9TX7hqtF7G6y1kXYSrSsDe666
S1gRbVmbtoQ0LAIKZ1jS1toIXk2jaLzHSUCvUkwjiBusnTZDiWbHa7zoMM4v6xh+fl4Wfn/u4h27
t81y6wMAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
	Import-Module RemoteDesktop
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
#endregion Source: Globals.ps1

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formSessionsRDP = New-Object 'System.Windows.Forms.Form'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonMessageGénéral = New-Object 'System.Windows.Forms.Button'
	$buttonFermerTouteslesSessi = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonMessages = New-Object 'System.Windows.Forms.Button'
	$buttonTélémaintenance = New-Object 'System.Windows.Forms.Button'
	$buttonProcessus = New-Object 'System.Windows.Forms.Button'
	$buttonFermerLesSessions = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$checkboxSessionsActives = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxSessionsInactives = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxSessionsDéconnectés = New-Object 'System.Windows.Forms.CheckBox'
	$labelnsessions = New-Object 'System.Windows.Forms.Label'
	$labelFermesRDS = New-Object 'System.Windows.Forms.Label'
	$labelSessionsRDP = New-Object 'System.Windows.Forms.Label'
	$combobox1 = New-Object 'System.Windows.Forms.ComboBox'
	$buttonQuitter = New-Object 'System.Windows.Forms.Button'
	$buttonRafraichir = New-Object 'System.Windows.Forms.Button'
	$listview1 = New-Object 'System.Windows.Forms.ListView'
	$Utilisateurs = New-Object 'System.Windows.Forms.ColumnHeader'
	$serveurs = New-Object 'System.Windows.Forms.ColumnHeader'
	$ID = New-Object 'System.Windows.Forms.ColumnHeader'
	$Etat = New-Object 'System.Windows.Forms.ColumnHeader'
	$contextmenustrip1 = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$qqToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripmenuitem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripmenuitem2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$télémaintenanceToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formSessionsRDP_Load={
		[string]$ScriptDirectory = Get-ScriptDirectory
		init_proc
	}
	
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	function Load-ComboBox
	{
	<#
	    .SYNOPSIS
	        This functions helps you load items into a ComboBox.
	
	    .DESCRIPTION
	        Use this function to dynamically load items into the ComboBox control.
	
	    .PARAMETER  ComboBox
	        The ComboBox control you want to add items to.
	
	    .PARAMETER  Items
	        The object or objects you wish to load into the ComboBox's Items collection.
	
	    .PARAMETER  DisplayMember
	        Indicates the property to display for the items in this control.
	    
	    .PARAMETER  Append
	        Adds the item(s) to the ComboBox without clearing the Items collection.
	    
	    .EXAMPLE
	        Load-ComboBox $combobox1 "Red", "White", "Blue"
	    
	    .EXAMPLE
	        Load-ComboBox $combobox1 "Red" -Append
	        Load-ComboBox $combobox1 "White" -Append
	        Load-ComboBox $combobox1 "Blue" -Append
	    
	    .EXAMPLE
	        Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>	
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	#region Traitement des Evènements
	$buttonFermerLesSessions_Click={
		#TODO: Place custom script here
		$njob = 0
		Write-Host $listview1.SelectedItems.count
		foreach ($item in $listview1.SelectedItems)
		{
			# Créer autant de Job que de commande (Traitements parallèle)
			$njob = $njob + 1
			close_RDPsessions $item.SubItems[1].Text $item.SubItems[2].text $njob
		}
		# Refresh ListView
		Combo_TRT $combobox1.SelectedItem
	}
	
	$buttonRafraichir_Click={
		Combo_TRT $combobox1.SelectedItem
	}
	
	$combobox1_SelectedIndexChanged ={
		Combo_TRT $combobox1.SelectedItem
	}
	
	$buttonProcessus_Click = {
		# Declaration des variables global avant d'ouvrir le GUI enfant
		$global:serveur = $listview1.SelectedItems[0].SubItems[1].text
		$global:user = $listview1.SelectedItems.text
		$commande = "c:\temp\RemoteProcess.Export.ps1"
		$param = $serveur + " " + $user
		Write-Host $param
		& $commande + $param
	}
	
	$buttonTélémaintenance_Click = {
		foreach ($item in $listview1.SelectedItems)
		{
			Rdp_ShadowCopy $item.SubItems[1].Text $item.SubItems[2].text $njob
		}
	}
	
	$buttonMessages_Click = {
		#TODO: Place custom script here
		$global:serveur = $listview1.SelectedItems[0].SubItems[1].text
		$global:user = $listview1.SelectedItems.text
		Show-MsgForm_psf
	}
	
	$listview1_ColumnClick = {
		#Event Argument: $_ = [System.Windows.Forms.ColumnClickEventArgs]
		Write-Host ("Column '{0}' was clicked" -f $this.Columns[$_.Column].Text)
	}
	#endregion
	
	#region Fonctions du script
	function init_proc
	{
		$global:n = 0
		$global:computername = ""
		$ScrName = (Split-Path -leaf $PSCommandpath)
		$inifileName = ($ScrName.substring(0, $ScrName.length - 4)) + ".inf"
		$inifile = $ScriptDirectory + "\" + $inifileName
		Write-Host $inifile
		$iniContent = read_ini $inifile
		$value = ($iniContent["serveurs"]["Ferme RDP"])
		Write-Host $value
		Load-ComboBox $combobox1 "rdp.figecal.loc","rdp01.figecal.loc","FIG-APP01.figecal.loc","AGO-APP01.figecal.loc","SRVAPP01.figecal.loc"
	}
	
	################################################################################################################
	# Uniquement depuis un serveur broker
	# Utilise le module RemoteDesktop 
	################################################################################################################
	function query_sessions()
	{
		# $args[0] = nom du broker à intérroger
		Write-Host $args[0]
	switch ($args[0])
	{
		"rdp.figecal.loc" { $srv = "srvrdp01.figecal.loc" }
		"rdp01.figecal.loc" { $srv = "srvbroker.figecal.loc" }
		"FIG-APP01.figecal.loc" { $srv = "fig-app01.figecal.loc" }
		"AGO-APP01.figecal.loc" { $srv = "ago-app01.figecal.loc" }
		"SRVAPP01.figecal.loc" { $srv = "srvapp01.figecal.loc" }
	}
	
		$n = 0
		$selected = Get-RDUserSession -ConnectionBroker $srv | Select-Object sessionId, hostserver, username, sessionstate
		Write-Host $selected.count
		ForEach ($Result in $selected)
		{
			#Write-Host $Result.UserName
			$n = ($n + 1)
			# Mise en forme du texte état de connexion
			switch ($Result.sessionstate)
			{
				"STATE_DISCONNECTED" { $state = "Déconnecté" }
				"STATE_CONNECTED" { $state = "Inactive" }
				"STATE_ACTIVE" { $state = "Active" }
			}
			
			# Supprime le nom de domaine des nom de serveur
			$hostname = $Result.hostserver.split('.')[0].split('.')
			
			# Ajoute les éléments à la listview
			Add-ListViewItem $listview1 -Items $Result.username -ImageIndex 0 -SubItems $hostname, $Result.sessionID, $state
			
		}
		return $n
	}
	
	function read_ini
	{
		$FilePath = $args[0]
		{
			$ini = @{ }
			switch -regex -file $FilePath
			{
				"^\[(.+)\]" # Section
				{
					$section = $matches[1]
					$ini[$section] = @{ }
					$CommentCount = 0
				}
				"^(;.*)$" # Comment
				{
					$value = $matches[1]
					$CommentCount = $CommentCount + 1
					$name = "Comment" + $CommentCount
					$ini[$section][$name] = $value
				}
				"(.+?)\s*=(.*)" # Key
				{
					$name, $value = $matches[1 .. 2]
					$ini[$section][$name] = $value
				}
			}
			return $ini
		}
	}
	
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	function Combo_TRT
	{
		$n = 0
		$listview1.BeginUpdate()
		$listview1.Items.Clear()
		
		$combotxt = $args[0]
		$n = query_sessions ($combotxt)
		$listview1.EndUpdate()
		
		# Inscrit le nombre de sessions listées dans le Label
		Write-Host $n
		$labelnsessions.Text = $n
		$labelnsessions.Update()
	}
	
	function Close_RDPSessions
	{
		$serveur = $args[0]
		$SessionsID = $args[1]
		$PowerShellJobN = $args[2]
		Write-Host $PowerShellJobN
		
		# Creation de Job pour chaque entrée MultiTread
		Start-Job -Name $PowerShellJobN -ScriptBlock {
			param ($serveur,$SessionsID)
			Write-Host $serveur + " " + $SessionsID
			logoff $SessionsID /server:$serveur
		} -ArgumentList ($serveur, $SessionsID)
	}
	
	function Rdp_ShadowCopy
	{
		$serveur = $args[0]
		$SessionsID = $args[1]
		write-host /v:$serveur /Multimon /Shadow:$SessionsID /Control /noConsentPrompt
		mstsc /v:$serveur /Shadow:$SessionsID /Control /noConsentPrompt
	}
	#endregion
	
	
	$labelFermesRDS_Click={
		#TODO: Place custom script here
		
	}
	
	$checkboxSessionsActives_CheckedChanged={
		#TODO: Place custom script here
		
	}
	
	$contextmenustrip1_Opening=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
	}
	
	$labelFermesRDS_Click={
		#TODO: Place custom script here
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formSessionsRDP.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_checkboxSessionsActives = $checkboxSessionsActives.Checked
		$script:MainForm_checkboxSessionsInactives = $checkboxSessionsInactives.Checked
		$script:MainForm_checkboxSessionsDéconnectés = $checkboxSessionsDéconnectés.Checked
		$script:MainForm_combobox1 = $combobox1.Text
		$script:MainForm_combobox1_SelectedItem = $combobox1.SelectedItem
		$script:MainForm_listview1 = $listview1.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonMessages.remove_Click($buttonMessages_Click)
			$buttonTélémaintenance.remove_Click($buttonTélémaintenance_Click)
			$buttonProcessus.remove_Click($buttonProcessus_Click)
			$buttonFermerLesSessions.remove_Click($buttonFermerLesSessions_Click)
			$combobox1.remove_SelectedIndexChanged($combobox1_SelectedIndexChanged)
			$buttonRafraichir.remove_Click($buttonRafraichir_Click)
			$formSessionsRDP.remove_Load($formSessionsRDP_Load)
			$contextmenustrip1.remove_Opening($contextmenustrip1_Opening)
			$formSessionsRDP.remove_Load($Form_StateCorrection_Load)
			$formSessionsRDP.remove_Closing($Form_StoreValues_Closing)
			$formSessionsRDP.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formSessionsRDP.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	$contextmenustrip1.SuspendLayout()
	#
	# formSessionsRDP
	#
	$formSessionsRDP.Controls.Add($statusbar1)
	$formSessionsRDP.Controls.Add($groupbox3)
	$formSessionsRDP.Controls.Add($groupbox2)
	$formSessionsRDP.Controls.Add($groupbox1)
	$formSessionsRDP.Controls.Add($labelnsessions)
	$formSessionsRDP.Controls.Add($labelFermesRDS)
	$formSessionsRDP.Controls.Add($labelSessionsRDP)
	$formSessionsRDP.Controls.Add($combobox1)
	$formSessionsRDP.Controls.Add($buttonQuitter)
	$formSessionsRDP.Controls.Add($buttonRafraichir)
	$formSessionsRDP.Controls.Add($listview1)
	$formSessionsRDP.AutoScaleDimensions = '6, 13'
	$formSessionsRDP.AutoScaleMode = 'Font'
	$formSessionsRDP.CancelButton = $buttonQuitter
	$formSessionsRDP.ClientSize = '654, 456'
	$formSessionsRDP.MaximizeBox = $False
	$formSessionsRDP.MaximumSize = '670, 495'
	$formSessionsRDP.MinimumSize = '670, 495'
	$formSessionsRDP.Name = 'formSessionsRDP'
	$formSessionsRDP.StartPosition = 'CenterScreen'
	$formSessionsRDP.Text = 'Sessions RDP'
	$formSessionsRDP.add_Load($formSessionsRDP_Load)
	#
	# statusbar1
	#
	$statusbar1.Location = '0, 434'
	$statusbar1.Name = 'statusbar1'
	$statusbar1.ShowPanels = $True
	$statusbar1.Size = '654, 22'
	$statusbar1.TabIndex = 13
	$statusbar1.Text = 'FIGECAL 2018 - NPT'
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($buttonMessageGénéral)
	$groupbox3.Controls.Add($buttonFermerTouteslesSessi)
	$groupbox3.Location = '430, 310'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Size = '213, 88'
	$groupbox3.TabIndex = 12
	$groupbox3.TabStop = $False
	$groupbox3.Text = 'Actions sur les Serveurs'
	$groupbox3.UseCompatibleTextRendering = $True
	#
	# buttonMessageGénéral
	#
	$buttonMessageGénéral.Location = '17, 54'
	$buttonMessageGénéral.Name = 'buttonMessageGénéral'
	$buttonMessageGénéral.Size = '179, 23'
	$buttonMessageGénéral.TabIndex = 12
	$buttonMessageGénéral.Text = 'Message général'
	$buttonMessageGénéral.UseCompatibleTextRendering = $True
	$buttonMessageGénéral.UseVisualStyleBackColor = $True
	#
	# buttonFermerTouteslesSessi
	#
	$buttonFermerTouteslesSessi.Location = '17, 21'
	$buttonFermerTouteslesSessi.Name = 'buttonFermerTouteslesSessi'
	$buttonFermerTouteslesSessi.Size = '179, 23'
	$buttonFermerTouteslesSessi.TabIndex = 9
	$buttonFermerTouteslesSessi.Text = 'Fermer toutes les sessions'
	$buttonFermerTouteslesSessi.UseCompatibleTextRendering = $True
	$buttonFermerTouteslesSessi.UseVisualStyleBackColor = $True
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($buttonMessages)
	$groupbox2.Controls.Add($buttonTélémaintenance)
	$groupbox2.Controls.Add($buttonProcessus)
	$groupbox2.Controls.Add($buttonFermerLesSessions)
	$groupbox2.Location = '430, 149'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '213, 155'
	$groupbox2.TabIndex = 11
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'Actions sur les sessions'
	$groupbox2.UseCompatibleTextRendering = $True
	#
	# buttonMessages
	#
	$buttonMessages.Location = '18, 119'
	$buttonMessages.Name = 'buttonMessages'
	$buttonMessages.Size = '179, 23'
	$buttonMessages.TabIndex = 11
	$buttonMessages.Text = 'Messages'
	$buttonMessages.UseCompatibleTextRendering = $True
	$buttonMessages.UseVisualStyleBackColor = $True
	$buttonMessages.add_Click($buttonMessages_Click)
	#
	# buttonTélémaintenance
	#
	$buttonTélémaintenance.Location = '18, 85'
	$buttonTélémaintenance.Name = 'buttonTélémaintenance'
	$buttonTélémaintenance.Size = '179, 23'
	$buttonTélémaintenance.TabIndex = 10
	$buttonTélémaintenance.Text = 'Télémaintenance'
	$buttonTélémaintenance.UseCompatibleTextRendering = $True
	$buttonTélémaintenance.UseVisualStyleBackColor = $True
	$buttonTélémaintenance.add_Click($buttonTélémaintenance_Click)
	#
	# buttonProcessus
	#
	$buttonProcessus.Location = '18, 51'
	$buttonProcessus.Name = 'buttonProcessus'
	$buttonProcessus.Size = '179, 23'
	$buttonProcessus.TabIndex = 9
	$buttonProcessus.Text = 'Processus'
	$buttonProcessus.UseCompatibleTextRendering = $True
	$buttonProcessus.UseVisualStyleBackColor = $True
	$buttonProcessus.add_Click($buttonProcessus_Click)
	#
	# buttonFermerLesSessions
	#
	$buttonFermerLesSessions.Location = '18, 19'
	$buttonFermerLesSessions.Name = 'buttonFermerLesSessions'
	$buttonFermerLesSessions.Size = '179, 23'
	$buttonFermerLesSessions.TabIndex = 8
	$buttonFermerLesSessions.Text = 'Fermer les sessions'
	$buttonFermerLesSessions.UseCompatibleTextRendering = $True
	$buttonFermerLesSessions.UseVisualStyleBackColor = $True
	$buttonFermerLesSessions.add_Click($buttonFermerLesSessions_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($checkboxSessionsActives)
	$groupbox1.Controls.Add($checkboxSessionsInactives)
	$groupbox1.Controls.Add($checkboxSessionsDéconnectés)
	$groupbox1.Location = '430, 61'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '213, 82'
	$groupbox1.TabIndex = 10
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Filtre Affichage'
	$groupbox1.UseCompatibleTextRendering = $True
	#
	# checkboxSessionsActives
	#
	$checkboxSessionsActives.AutoSize = $True
	$checkboxSessionsActives.Checked = $True
	$checkboxSessionsActives.CheckState = 'Checked'
	$checkboxSessionsActives.Location = '13, 55'
	$checkboxSessionsActives.Name = 'checkboxSessionsActives'
	$checkboxSessionsActives.Size = '109, 18'
	$checkboxSessionsActives.TabIndex = 4
	$checkboxSessionsActives.Text = 'Sessions Actives'
	$checkboxSessionsActives.UseCompatibleTextRendering = $True
	$checkboxSessionsActives.UseVisualStyleBackColor = $True
	#
	# checkboxSessionsInactives
	#
	$checkboxSessionsInactives.Checked = $True
	$checkboxSessionsInactives.CheckState = 'Checked'
	$checkboxSessionsInactives.Location = '13, 34'
	$checkboxSessionsInactives.Name = 'checkboxSessionsInactives'
	$checkboxSessionsInactives.Size = '152, 24'
	$checkboxSessionsInactives.TabIndex = 3
	$checkboxSessionsInactives.Text = 'Sessions Inactives'
	$checkboxSessionsInactives.UseCompatibleTextRendering = $True
	$checkboxSessionsInactives.UseVisualStyleBackColor = $True
	#
	# checkboxSessionsDéconnectés
	#
	$checkboxSessionsDéconnectés.Checked = $True
	$checkboxSessionsDéconnectés.CheckState = 'Checked'
	$checkboxSessionsDéconnectés.Location = '12, 14'
	$checkboxSessionsDéconnectés.Name = 'checkboxSessionsDéconnectés'
	$checkboxSessionsDéconnectés.Size = '152, 24'
	$checkboxSessionsDéconnectés.TabIndex = 2
	$checkboxSessionsDéconnectés.Text = 'Sessions Déconnectés'
	$checkboxSessionsDéconnectés.UseCompatibleTextRendering = $True
	$checkboxSessionsDéconnectés.UseVisualStyleBackColor = $True
	#
	# labelnsessions
	#
	$labelnsessions.AutoSize = $True
	$labelnsessions.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelnsessions.ForeColor = 'Red'
	$labelnsessions.Location = '116, 14'
	$labelnsessions.Name = 'labelnsessions'
	$labelnsessions.Size = '0, 16'
	$labelnsessions.TabIndex = 9
	$labelnsessions.UseCompatibleTextRendering = $True
	#
	# labelFermesRDS
	#
	$labelFermesRDS.AutoSize = $True
	$labelFermesRDS.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelFermesRDS.Location = '430, 14'
	$labelFermesRDS.Name = 'labelFermesRDS'
	$labelFermesRDS.Size = '72, 17'
	$labelFermesRDS.TabIndex = 7
	$labelFermesRDS.Text = 'Fermes RDS'
	$labelFermesRDS.UseCompatibleTextRendering = $True
	#
	# labelSessionsRDP
	#
	$labelSessionsRDP.AutoSize = $True
	$labelSessionsRDP.Font = 'Microsoft Sans Serif, 8.25pt, style=Bold'
	$labelSessionsRDP.Location = '19, 14'
	$labelSessionsRDP.Name = 'labelSessionsRDP'
	$labelSessionsRDP.Size = '89, 17'
	$labelSessionsRDP.TabIndex = 6
	$labelSessionsRDP.Text = 'Sessions RDP : '
	$labelSessionsRDP.UseCompatibleTextRendering = $True
	#
	# combobox1
	#
	$combobox1.FormattingEnabled = $True
	$combobox1.Location = '430, 31'
	$combobox1.Name = 'combobox1'
	$combobox1.Size = '213, 21'
	$combobox1.TabIndex = 4
	$combobox1.add_SelectedIndexChanged($combobox1_SelectedIndexChanged)
	#
	# buttonQuitter
	#
	$buttonQuitter.DialogResult = 'Cancel'
	$buttonQuitter.Location = '568, 409'
	$buttonQuitter.Name = 'buttonQuitter'
	$buttonQuitter.Size = '75, 23'
	$buttonQuitter.TabIndex = 3
	$buttonQuitter.Text = 'Quitter'
	$buttonQuitter.UseCompatibleTextRendering = $True
	$buttonQuitter.UseVisualStyleBackColor = $True
	#
	# buttonRafraichir
	#
	$buttonRafraichir.Location = '22, 409'
	$buttonRafraichir.Name = 'buttonRafraichir'
	$buttonRafraichir.Size = '397, 23'
	$buttonRafraichir.TabIndex = 2
	$buttonRafraichir.Text = 'Rafraichir'
	$buttonRafraichir.UseCompatibleTextRendering = $True
	$buttonRafraichir.UseVisualStyleBackColor = $True
	$buttonRafraichir.add_Click($buttonRafraichir_Click)
	#
	# listview1
	#
	$listview1.AllowColumnReorder = $True
	[void]$listview1.Columns.Add($Utilisateurs)
	[void]$listview1.Columns.Add($serveurs)
	[void]$listview1.Columns.Add($ID)
	[void]$listview1.Columns.Add($Etat)
	$listview1.ContextMenuStrip = $contextmenustrip1
	$listview1.FullRowSelect = $True
	$listview1.GridLines = $True
	$listview1.Location = '22, 34'
	$listview1.Name = 'listview1'
	$listview1.Size = '397, 366'
	$listview1.Sorting = 'Ascending'
	$listview1.TabIndex = 0
	$listview1.UseCompatibleStateImageBehavior = $False
	$listview1.View = 'Details'
	#
	# Utilisateurs
	#
	$Utilisateurs.Text = 'Utilisateurs'
	$Utilisateurs.Width = 91
	#
	# serveurs
	#
	$serveurs.Text = 'Serveurs RDP'
	$serveurs.Width = 94
	#
	# ID
	#
	$ID.Text = 'ID'
	$ID.Width = 91
	#
	# Etat
	#
	$Etat.Text = 'Etat'
	$Etat.Width = 158
	#
	# contextmenustrip1
	#
	[void]$contextmenustrip1.Items.Add($qqToolStripMenuItem)
	[void]$contextmenustrip1.Items.Add($toolstripmenuitem1)
	[void]$contextmenustrip1.Items.Add($toolstripmenuitem2)
	[void]$contextmenustrip1.Items.Add($télémaintenanceToolStripMenuItem)
	$contextmenustrip1.Name = 'contextmenustrip1'
	$contextmenustrip1.RenderMode = 'Professional'
	$contextmenustrip1.ShowImageMargin = $False
	$contextmenustrip1.Size = '158, 92'
	$contextmenustrip1.add_Opening($contextmenustrip1_Opening)
	#
	# qqToolStripMenuItem
	#
	$qqToolStripMenuItem.Name = 'qqToolStripMenuItem'
	$qqToolStripMenuItem.Size = '157, 22'
	$qqToolStripMenuItem.Text = 'Fermer la session'
	#
	# toolstripmenuitem1
	#
	$toolstripmenuitem1.Name = 'toolstripmenuitem1'
	$toolstripmenuitem1.Size = '157, 22'
	$toolstripmenuitem1.Text = 'Voir les processus'
	#
	# toolstripmenuitem2
	#
	$toolstripmenuitem2.Name = 'toolstripmenuitem2'
	$toolstripmenuitem2.Size = '157, 22'
	$toolstripmenuitem2.Text = 'Envoyer un message'
	#
	# télémaintenanceToolStripMenuItem
	#
	$télémaintenanceToolStripMenuItem.Name = 'télémaintenanceToolStripMenuItem'
	$télémaintenanceToolStripMenuItem.Size = '157, 22'
	$télémaintenanceToolStripMenuItem.Text = 'Télémaintenance'
	$contextmenustrip1.ResumeLayout()
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox3.ResumeLayout()
	$formSessionsRDP.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formSessionsRDP.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formSessionsRDP.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formSessionsRDP.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formSessionsRDP.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formSessionsRDP.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: MsgForm.psf
function Show-MsgForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
gw8AACODCAAAAAAABADVl91u2jAUx+8n7R2sXOwKASEEWg0itWkrTStb1bBud5WTHKiHYyPbacuu
9ih7l77YTkjoSmlJiijqhISIOcf/8/HzSdI7h0heg5odUUMJ/tBMir7l1G3Le/+OkN5XxcZMUH7C
OHyhCXgDPT6RKqlP9ajXWPk39wl/QmSImU2hbwUzbSCpf2cilje6nvnm3zXy1F81clEE0a43s0+N
+Ck3qYK+gNQoymvkLA05iz7DbCgnIPpht0vdyO3Y+04bmnv7FhEYSt8a4X4D0JqOQVskumI8Vmhu
+VIYJbnOM8R4z5ScgjKzwu8gNTKIKIcjloDIYkHTTo3YTq+xMC1zHcgYLO8ElUp9fM5AmID9QodO
C/N17Ga5U57DobxFFco1lHpk7bG8hzUpdQkMVeZMamawBpbnY5iggkgBiFLfIdway3te6vgadyts
TyWNl0O7zJZ6jbnRwqOcqsPUGClenatwLnMgRMpBrQNrtSqnMqJ5MV27VSOtjrtSmec6t6RawSsH
quuiyiq3T/SLhp9EDIhTJet5dz/QZPqxekTfNPgymWIBQg7ZDueAioqJseUNVbqK8JNbXDCdUh6Y
GYdDGk18yaV63v8hZnjQosmjQl7OFx+R1shRe6PgHYtrOdscvLa9twl4heprgteqDF71YN4Uc0XY
22EuSwbH/6tDZ1AnlLf2y3jL7nw4/lmkpJYjQwIqNAmw8KMa2a933enqfXEdtA4Oy45dwWWAWTLO
BFRubw75IsvKfLsuAm53qxyjf4Svbv/yvvtXEE120fgoE8KaFNSeQnFzvvs9lOmm08exsWqdym1Z
G0PlXjmtLg6j9otatfoIVjKMCAeS5NGRuz/EyNSAxsUMez1/iPwfxlVWb4j9KyrGEJfU/3LZes1A
W7440BoSRBD0wrZYmXmJjqTiLNwCxr3G/a6PVfKDswuNrR/OcsXsRW43QoreIJibaDWdkTvqjmw7
dpvUoeVaPxK+k5x8qWD7QveXOfK9xsOXbu8vbxgnXYMPAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formMessages = New-Object 'System.Windows.Forms.Form'
	$buttonAnnuler = New-Object 'System.Windows.Forms.Button'
	$buttonEnvoyer = New-Object 'System.Windows.Forms.Button'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$checkboxEnvoyerLeMessageÀTou = New-Object 'System.Windows.Forms.CheckBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formMessages_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	$checkboxEnvoyerLeMessageÀTou_CheckedChanged={
		#TODO: Place custom script here
		$sendall = 1
	}
	
	$buttonEnvoyer_Click={
		
		#Mise en forme du message
		msg $sessions /server:$serveur $message 
	}
	
	$buttonAnnuler_Click={
		#TODO: Place custom script here
		$formMessages.Close()
	}
	
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	#endregion
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formMessages.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MsgForm_textbox1 = $textbox1.Text
		$script:MsgForm_checkboxEnvoyerLeMessageÀTou = $checkboxEnvoyerLeMessageÀTou.Checked
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonAnnuler.remove_Click($buttonAnnuler_Click)
			$buttonEnvoyer.remove_Click($buttonEnvoyer_Click)
			$checkboxEnvoyerLeMessageÀTou.remove_CheckedChanged($checkboxEnvoyerLeMessageÀTou_CheckedChanged)
			$formMessages.remove_Load($formMessages_Load)
			$formMessages.remove_Load($Form_StateCorrection_Load)
			$formMessages.remove_Closing($Form_StoreValues_Closing)
			$formMessages.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formMessages.SuspendLayout()
	#
	# formMessages
	#
	$formMessages.Controls.Add($buttonAnnuler)
	$formMessages.Controls.Add($buttonEnvoyer)
	$formMessages.Controls.Add($textbox1)
	$formMessages.Controls.Add($checkboxEnvoyerLeMessageÀTou)
	$formMessages.AutoScaleDimensions = '6, 13'
	$formMessages.AutoScaleMode = 'Font'
	$formMessages.ClientSize = '620, 310'
	$formMessages.ControlBox = $False
	$formMessages.Name = 'formMessages'
	$formMessages.StartPosition = 'CenterScreen'
	$formMessages.Text = 'Messages'
	$formMessages.add_Load($formMessages_Load)
	#
	# buttonAnnuler
	#
	$buttonAnnuler.Location = '512, 265'
	$buttonAnnuler.Name = 'buttonAnnuler'
	$buttonAnnuler.Size = '75, 23'
	$buttonAnnuler.TabIndex = 3
	$buttonAnnuler.Text = '&Annuler'
	$buttonAnnuler.UseCompatibleTextRendering = $True
	$buttonAnnuler.UseVisualStyleBackColor = $True
	$buttonAnnuler.add_Click($buttonAnnuler_Click)
	#
	# buttonEnvoyer
	#
	$buttonEnvoyer.Location = '418, 265'
	$buttonEnvoyer.Name = 'buttonEnvoyer'
	$buttonEnvoyer.Size = '75, 23'
	$buttonEnvoyer.TabIndex = 2
	$buttonEnvoyer.Text = 'Envoyer'
	$buttonEnvoyer.UseCompatibleTextRendering = $True
	$buttonEnvoyer.UseVisualStyleBackColor = $True
	$buttonEnvoyer.add_Click($buttonEnvoyer_Click)
	#
	# textbox1
	#
	$textbox1.Font = 'Microsoft Sans Serif, 9.75pt'
	$textbox1.Location = '32, 61'
	$textbox1.Multiline = $True
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '555, 175'
	$textbox1.TabIndex = 1
	#
	# checkboxEnvoyerLeMessageÀTou
	#
	$checkboxEnvoyerLeMessageÀTou.Location = '31, 16'
	$checkboxEnvoyerLeMessageÀTou.Name = 'checkboxEnvoyerLeMessageÀTou'
	$checkboxEnvoyerLeMessageÀTou.Size = '327, 24'
	$checkboxEnvoyerLeMessageÀTou.TabIndex = 0
	$checkboxEnvoyerLeMessageÀTou.Text = 'Envoyer le message à toutes les Sessions'
	$checkboxEnvoyerLeMessageÀTou.UseCompatibleTextRendering = $True
	$checkboxEnvoyerLeMessageÀTou.UseVisualStyleBackColor = $True
	$checkboxEnvoyerLeMessageÀTou.add_CheckedChanged($checkboxEnvoyerLeMessageÀTou_CheckedChanged)
	$formMessages.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formMessages.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formMessages.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formMessages.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formMessages.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formMessages.ShowDialog()

}
#endregion Source: MsgForm.psf

#Start the application
Main ($CommandLine)
