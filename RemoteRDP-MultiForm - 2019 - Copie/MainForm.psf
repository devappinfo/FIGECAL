<File version="3.1">
  <FileID>317f7c0d-07cb-4dfd-93d5-1bd1af77680a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAJlUSURBVHhe7P0HeBxJeqaL7j33HB09+9y7u1rp
aKWVWaPV1cqudkduJI1Woxlpunt62jfZNE3vSZCwhCe8BwiQhPfee0eCcARAeO89ysN7VMGT341I
AGwQzO5mNwECVfjf5teoyozMjMysjP+LyMjIf0UQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEFoMcdOnAi2
sXWosrC0qTInkUgkEomk1bpjY1t17cbNqs0w//WYWt5pXQewsArMr5BIJBKJRNJmcR4WVmIzzH89
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
AAAAYGA8e/Yf93imk4B8NXcAAAAASUVORK5CYII=</Preview>
  <Form>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
5gw/+ZNX/gd5idEUllMAAA==</Form>
  <Code><![CDATA[
$formSessionsRDP_Load={
	[string]$ScriptDirectory = Get-ScriptDirectory
	init_proc
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}

function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}

function Load-ComboBox
{
<#
    .SYNOPSIS
        This functions helps you load items into a ComboBox.

    .DESCRIPTION
        Use this function to dynamically load items into the ComboBox control.

    .PARAMETER  ComboBox
        The ComboBox control you want to add items to.

    .PARAMETER  Items
        The object or objects you wish to load into the ComboBox's Items collection.

    .PARAMETER  DisplayMember
        Indicates the property to display for the items in this control.
    
    .PARAMETER  Append
        Adds the item(s) to the ComboBox without clearing the Items collection.
    
    .EXAMPLE
        Load-ComboBox $combobox1 "Red", "White", "Blue"
    
    .EXAMPLE
        Load-ComboBox $combobox1 "Red" -Append
        Load-ComboBox $combobox1 "White" -Append
        Load-ComboBox $combobox1 "Blue" -Append
    
    .EXAMPLE
        Load-ComboBox $combobox1 (Get-Process) "ProcessName"
#>	
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}
#endregion

#region Traitement des Evènements
$buttonFermerLesSessions_Click={
	#TODO: Place custom script here
	$njob = 0
	Write-Host $listview1.SelectedItems.count
	foreach ($item in $listview1.SelectedItems)
	{
		# Créer autant de Job que de commande (Traitements parallèle)
		$njob = $njob + 1
		close_RDPsessions $item.SubItems[1].Text $item.SubItems[2].text $njob
	}
	# Refresh ListView
	Combo_TRT $combobox1.SelectedItem
}

$buttonRafraichir_Click={
	Combo_TRT $combobox1.SelectedItem
}

$combobox1_SelectedIndexChanged ={
	Combo_TRT $combobox1.SelectedItem
}

$buttonProcessus_Click = {
	# Declaration des variables global avant d'ouvrir le GUI enfant
	$global:serveur = $listview1.SelectedItems[0].SubItems[1].text
	$global:user = $listview1.SelectedItems.text
	$param = $serveur + " " + $user
	Write-Host $param
	$commande = "Z:\ProcessRemote.ps1", $serveur, $user
	Start-Process powershell.exe -ArgumentList $commande
}

$buttonTélémaintenance_Click = {
	foreach ($item in $listview1.SelectedItems)
	{
		Rdp_ShadowCopy $item.SubItems[1].Text $item.SubItems[2].text $njob
	}
}

$buttonMessages_Click = {
	#TODO: Place custom script here
	$global:serveur = $listview1.SelectedItems[0].SubItems[1].text
	$global:id = $listview1.SelectedItems[0].SubItems[2].Text
	$global:user = $listview1.SelectedItems[0].Text
	Show-MsgForm_psf 
}

$listview1_ColumnClick = {
	#Event Argument: $_ = [System.Windows.Forms.ColumnClickEventArgs]
	Write-Host "Ca va la"
	Write-Host ("Column '{0}' was clicked" -f $this.Columns[$_.Column].Text)
	#TODO : trier les colonnes
	Write-Host $this.Columns[$_.Column].Index
	Update-ListViewColumnSort -ListView $listview1 -ColumnIndex $this.Columns[$_.Column].Index -SortOrder None  
}

$checkboxSessionsDéconnectés_CheckStateChanged = {
	#TODO: Place custom script here
	Combo_TRT $combobox1.SelectedItem
}

$checkboxSessionsInactives_CheckStateChanged = {
	#TODO: Place custom script here
	Combo_TRT $combobox1.SelectedItem
}

$checkboxSessionsActives_CheckStateChanged = {
	#TODO: Place custom script here
	Combo_TRT $combobox1.SelectedItem
}



#endregion

#region Fonctions du script
function init_proc
{
	$global:n = 0
	$global:computername = ""
	$ScrName = (Split-Path -leaf $PSCommandpath)
	$inifileName = ($ScrName.substring(0, $ScrName.length - 4)) + ".inf"
	$inifile = $ScriptDirectory + "\" + $inifileName
	Write-Host $inifile
	$iniContent = read_ini $inifile
	$value = ($iniContent["serveurs"]["Ferme RDP"])
	$tabValueNotChecked = @()
	Write-Host $value
	Load-ComboBox $combobox1 "rdp.figecal.loc", "rdp01.figecal.loc", "FIG-APP01.figecal.loc", "AGO-APP01.figecal.loc", "SRVAPP01.figecal.loc"
	
}

################################################################################################################
# Uniquement depuis un serveur broker
# Utilise le module RemoteDesktop 
################################################################################################################
function query_sessions()
{
	# $args[0] = nom du broker à intérroger
	Write-Host $args[0]
switch ($args[0])
{
	"rdp.figecal.loc" { $srv = "srvrdp01.figecal.loc" }
	"rdp01.figecal.loc" { $srv = "srvbroker.figecal.loc" }
	"FIG-APP01.figecal.loc" { $srv = "fig-app01.figecal.loc" }
	"AGO-APP01.figecal.loc" { $srv = "ago-app01.figecal.loc" }
	"SRVAPP01.figecal.loc" { $srv = "srvapp01.figecal.loc" }
}

	$n = 0
	$script:selected = Get-RDUserSession -ConnectionBroker $srv | Sort-Object -Property hostserver | Select-Object sessionId, hostserver, username, sessionstate 
	Write-Host $selected.count
	$tag = New-Object -TypeName PSCustomObject -Property @{ sortOrder = [System.Windows.Forms.SortOrder]::Ascending }
	Write-Host $tag
	foreach ($col in $listview1.Columns)
	{
		$col.Tag = $tag
	}
	ForEach ($Result in $selected)
	{
		#Write-Host $Result.UserName
		
		# Mise en forme du texte état de connexion
		switch ($Result.sessionstate)
		{
			"STATE_DISCONNECTED" { $state = "Déconnecté" }
			"STATE_CONNECTED" { $state = "Inactive" }
			"STATE_ACTIVE" { $state = "Active" }
		}
		
		# Supprime le nom de domaine des nom de serveur
		$hostname = $Result.hostserver.split('.')[0].split('.')
		if ($checkboxSessionsDéconnectés.Checked -eq $false)
		{
			if ($state -eq "Déconnecté")
			{
				continue
			}
		}
		
		if ($checkboxSessionsInactives.Checked -eq $false)
		{
			if ($state -eq "Inactive")
			{
				continue
			}
		}
		
		if ($checkboxSessionsActives.Checked -eq $false)
		{
			if ($state -eq "Active")
			{
				continue
			}
		}
		$n = ($n + 1)
		# Ajoute les éléments à la listview
		Add-ListViewItem $listview1 -Items $Result.username -ImageIndex 0 -SubItems $hostname, $Result.sessionID, $state 
		
	}
	return $n
}

function read_ini
{
	$FilePath = $args[0]
	{
		$ini = @{ }
		switch -regex -file $FilePath
		{
			"^\[(.+)\]" # Section
			{
				$section = $matches[1]
				$ini[$section] = @{ }
				$CommentCount = 0
			}
			"^(;.*)$" # Comment
			{
				$value = $matches[1]
				$CommentCount = $CommentCount + 1
				$name = "Comment" + $CommentCount
				$ini[$section][$name] = $value
			}
			"(.+?)\s*=(.*)" # Key
			{
				$name, $value = $matches[1 .. 2]
				$ini[$section][$name] = $value
			}
		}
		return $ini
	}
}

function Get-ScriptDirectory
{
<#
	.SYNOPSIS
		Get-ScriptDirectory returns the proper location of the script.

	.OUTPUTS
		System.String
	
	.NOTES
		Returns the correct path within a packaged executable.
#>
	[OutputType([string])]
	param ()
	if ($null -ne $hostinvocation)
	{
		Split-Path $hostinvocation.MyCommand.path
	}
	else
	{
		Split-Path $script:MyInvocation.MyCommand.Path
	}
}

function Combo_TRT
{
	$n = 0
	$listview1.BeginUpdate()
	$listview1.Items.Clear()
	
	$combotxt = $args[0]
	$n = query_sessions ($combotxt)
	$listview1.EndUpdate()
	
	# Inscrit le nombre de sessions listées dans le Label
	Write-Host $n
	$labelnsessions.Text = $n
	$labelnsessions.Update()
}

function Close_RDPSessions
{
	$serveur = $args[0]
	$SessionsID = $args[1]
	$PowerShellJobN = $args[2]
	Write-Host $PowerShellJobN
	
	# Creation de Job pour chaque entrée MultiTread
	Start-Job -Name $PowerShellJobN -ScriptBlock {
		param ($serveur,$SessionsID)
		Write-Host $serveur + " " + $SessionsID
		logoff $SessionsID /server:$serveur
	} -ArgumentList ($serveur, $SessionsID)
}

function Rdp_ShadowCopy
{
	$serveur = $args[0]
	$SessionsID = $args[1]
	write-host /v:$serveur /Multimon /Shadow:$SessionsID /Control /noConsentPrompt
	mstsc /v:$serveur /Shadow:$SessionsID /Control /noConsentPrompt
}
#endregion


$contextmenustrip1_Opening=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	Write-Host $contextmenustrip1.Items.Item.Selected.ToString
	Write-Host $
	
}












]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  </Assemblies>
</File>